//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: anki_vector/messaging/external_interface.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The grpc-defined connection between the SDK and Anki's Vector robot.
///
/// Usage: instantiate `Anki_Vector_ExternalInterface_ExternalInterfaceClient`, then call methods of this protocol to make API calls.
internal protocol Anki_Vector_ExternalInterface_ExternalInterfaceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol? { get }

  func protocolVersion(
    _ request: Anki_Vector_ExternalInterface_ProtocolVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ProtocolVersionRequest, Anki_Vector_ExternalInterface_ProtocolVersionResponse>

  func sDKInitialization(
    _ request: Anki_Vector_ExternalInterface_SDKInitializationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SDKInitializationRequest, Anki_Vector_ExternalInterface_SDKInitializationResponse>

  func driveWheels(
    _ request: Anki_Vector_ExternalInterface_DriveWheelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DriveWheelsRequest, Anki_Vector_ExternalInterface_DriveWheelsResponse>

  func playAnimationTrigger(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse>

  func playAnimation(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PlayAnimationRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse>

  func listAnimations(
    _ request: Anki_Vector_ExternalInterface_ListAnimationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ListAnimationsRequest, Anki_Vector_ExternalInterface_ListAnimationsResponse>

  func listAnimationTriggers(
    _ request: Anki_Vector_ExternalInterface_ListAnimationTriggersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ListAnimationTriggersRequest, Anki_Vector_ExternalInterface_ListAnimationTriggersResponse>

  func moveHead(
    _ request: Anki_Vector_ExternalInterface_MoveHeadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_MoveHeadRequest, Anki_Vector_ExternalInterface_MoveHeadResponse>

  func moveLift(
    _ request: Anki_Vector_ExternalInterface_MoveLiftRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_MoveLiftRequest, Anki_Vector_ExternalInterface_MoveLiftResponse>

  func stopAllMotors(
    _ request: Anki_Vector_ExternalInterface_StopAllMotorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_StopAllMotorsRequest, Anki_Vector_ExternalInterface_StopAllMotorsResponse>

  func displayFaceImageRGB(
    _ request: Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest, Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse>

  func eventStream(
    _ request: Anki_Vector_ExternalInterface_EventRequest,
    callOptions: CallOptions?,
    handler: @escaping (Anki_Vector_ExternalInterface_EventResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_EventRequest, Anki_Vector_ExternalInterface_EventResponse>

  func externalAudioStreamPlayback(
    callOptions: CallOptions?,
    handler: @escaping (Anki_Vector_ExternalInterface_ExternalAudioStreamResponse) -> Void
  ) -> BidirectionalStreamingCall<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest, Anki_Vector_ExternalInterface_ExternalAudioStreamResponse>

  func behaviorControl(
    callOptions: CallOptions?,
    handler: @escaping (Anki_Vector_ExternalInterface_BehaviorControlResponse) -> Void
  ) -> BidirectionalStreamingCall<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse>

  func assumeBehaviorControl(
    _ request: Anki_Vector_ExternalInterface_BehaviorControlRequest,
    callOptions: CallOptions?,
    handler: @escaping (Anki_Vector_ExternalInterface_BehaviorControlResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse>

  func cancelFaceEnrollment(
    _ request: Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest, Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse>

  func requestEnrolledNames(
    _ request: Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest, Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse>

  func updateEnrolledFaceByID(
    _ request: Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse>

  func eraseEnrolledFaceByID(
    _ request: Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse>

  func eraseAllEnrolledFaces(
    _ request: Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest, Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse>

  func setFaceToEnroll(
    _ request: Anki_Vector_ExternalInterface_SetFaceToEnrollRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetFaceToEnrollRequest, Anki_Vector_ExternalInterface_SetFaceToEnrollResponse>

  func enableMarkerDetection(
    _ request: Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest, Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse>

  func enableFaceDetection(
    _ request: Anki_Vector_ExternalInterface_EnableFaceDetectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableFaceDetectionRequest, Anki_Vector_ExternalInterface_EnableFaceDetectionResponse>

  func enableMotionDetection(
    _ request: Anki_Vector_ExternalInterface_EnableMotionDetectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableMotionDetectionRequest, Anki_Vector_ExternalInterface_EnableMotionDetectionResponse>

  func enableMirrorMode(
    _ request: Anki_Vector_ExternalInterface_EnableMirrorModeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableMirrorModeRequest, Anki_Vector_ExternalInterface_EnableMirrorModeResponse>

  func enableImageStreaming(
    _ request: Anki_Vector_ExternalInterface_EnableImageStreamingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableImageStreamingRequest, Anki_Vector_ExternalInterface_EnableImageStreamingResponse>

  func isImageStreamingEnabled(
    _ request: Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest, Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse>

  func cancelActionByIdTag(
    _ request: Anki_Vector_ExternalInterface_CancelActionByIdTagRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CancelActionByIdTagRequest, Anki_Vector_ExternalInterface_CancelActionByIdTagResponse>

  func goToPose(
    _ request: Anki_Vector_ExternalInterface_GoToPoseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_GoToPoseRequest, Anki_Vector_ExternalInterface_GoToPoseResponse>

  func dockWithCube(
    _ request: Anki_Vector_ExternalInterface_DockWithCubeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DockWithCubeRequest, Anki_Vector_ExternalInterface_DockWithCubeResponse>

  func driveOffCharger(
    _ request: Anki_Vector_ExternalInterface_DriveOffChargerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DriveOffChargerRequest, Anki_Vector_ExternalInterface_DriveOffChargerResponse>

  func driveOnCharger(
    _ request: Anki_Vector_ExternalInterface_DriveOnChargerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DriveOnChargerRequest, Anki_Vector_ExternalInterface_DriveOnChargerResponse>

  func findFaces(
    _ request: Anki_Vector_ExternalInterface_FindFacesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_FindFacesRequest, Anki_Vector_ExternalInterface_FindFacesResponse>

  func lookAroundInPlace(
    _ request: Anki_Vector_ExternalInterface_LookAroundInPlaceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_LookAroundInPlaceRequest, Anki_Vector_ExternalInterface_LookAroundInPlaceResponse>

  func rollBlock(
    _ request: Anki_Vector_ExternalInterface_RollBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_RollBlockRequest, Anki_Vector_ExternalInterface_RollBlockResponse>

  func photosInfo(
    _ request: Anki_Vector_ExternalInterface_PhotosInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PhotosInfoRequest, Anki_Vector_ExternalInterface_PhotosInfoResponse>

  func photo(
    _ request: Anki_Vector_ExternalInterface_PhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PhotoRequest, Anki_Vector_ExternalInterface_PhotoResponse>

  func thumbnail(
    _ request: Anki_Vector_ExternalInterface_ThumbnailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ThumbnailRequest, Anki_Vector_ExternalInterface_ThumbnailResponse>

  func deletePhoto(
    _ request: Anki_Vector_ExternalInterface_DeletePhotoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DeletePhotoRequest, Anki_Vector_ExternalInterface_DeletePhotoResponse>

  func driveStraight(
    _ request: Anki_Vector_ExternalInterface_DriveStraightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DriveStraightRequest, Anki_Vector_ExternalInterface_DriveStraightResponse>

  func turnInPlace(
    _ request: Anki_Vector_ExternalInterface_TurnInPlaceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_TurnInPlaceRequest, Anki_Vector_ExternalInterface_TurnInPlaceResponse>

  func setHeadAngle(
    _ request: Anki_Vector_ExternalInterface_SetHeadAngleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetHeadAngleRequest, Anki_Vector_ExternalInterface_SetHeadAngleResponse>

  func setLiftHeight(
    _ request: Anki_Vector_ExternalInterface_SetLiftHeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetLiftHeightRequest, Anki_Vector_ExternalInterface_SetLiftHeightResponse>

  func turnTowardsFace(
    _ request: Anki_Vector_ExternalInterface_TurnTowardsFaceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_TurnTowardsFaceRequest, Anki_Vector_ExternalInterface_TurnTowardsFaceResponse>

  func goToObject(
    _ request: Anki_Vector_ExternalInterface_GoToObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_GoToObjectRequest, Anki_Vector_ExternalInterface_GoToObjectResponse>

  func rollObject(
    _ request: Anki_Vector_ExternalInterface_RollObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_RollObjectRequest, Anki_Vector_ExternalInterface_RollObjectResponse>

  func popAWheelie(
    _ request: Anki_Vector_ExternalInterface_PopAWheelieRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PopAWheelieRequest, Anki_Vector_ExternalInterface_PopAWheelieResponse>

  func pickupObject(
    _ request: Anki_Vector_ExternalInterface_PickupObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PickupObjectRequest, Anki_Vector_ExternalInterface_PickupObjectResponse>

  func placeObjectOnGroundHere(
    _ request: Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest, Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse>

  func setMasterVolume(
    _ request: Anki_Vector_ExternalInterface_MasterVolumeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_MasterVolumeRequest, Anki_Vector_ExternalInterface_MasterVolumeResponse>

  func userAuthentication(
    _ request: Anki_Vector_ExternalInterface_UserAuthenticationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_UserAuthenticationRequest, Anki_Vector_ExternalInterface_UserAuthenticationResponse>

  func batteryState(
    _ request: Anki_Vector_ExternalInterface_BatteryStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_BatteryStateRequest, Anki_Vector_ExternalInterface_BatteryStateResponse>

  func versionState(
    _ request: Anki_Vector_ExternalInterface_VersionStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_VersionStateRequest, Anki_Vector_ExternalInterface_VersionStateResponse>

  func sayText(
    _ request: Anki_Vector_ExternalInterface_SayTextRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SayTextRequest, Anki_Vector_ExternalInterface_SayTextResponse>

  func connectCube(
    _ request: Anki_Vector_ExternalInterface_ConnectCubeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ConnectCubeRequest, Anki_Vector_ExternalInterface_ConnectCubeResponse>

  func disconnectCube(
    _ request: Anki_Vector_ExternalInterface_DisconnectCubeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DisconnectCubeRequest, Anki_Vector_ExternalInterface_DisconnectCubeResponse>

  func cubesAvailable(
    _ request: Anki_Vector_ExternalInterface_CubesAvailableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CubesAvailableRequest, Anki_Vector_ExternalInterface_CubesAvailableResponse>

  func flashCubeLights(
    _ request: Anki_Vector_ExternalInterface_FlashCubeLightsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_FlashCubeLightsRequest, Anki_Vector_ExternalInterface_FlashCubeLightsResponse>

  func forgetPreferredCube(
    _ request: Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest, Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse>

  func setPreferredCube(
    _ request: Anki_Vector_ExternalInterface_SetPreferredCubeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetPreferredCubeRequest, Anki_Vector_ExternalInterface_SetPreferredCubeResponse>

  func deleteCustomObjects(
    _ request: Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest, Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse>

  func createFixedCustomObject(
    _ request: Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest, Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse>

  func defineCustomObject(
    _ request: Anki_Vector_ExternalInterface_DefineCustomObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DefineCustomObjectRequest, Anki_Vector_ExternalInterface_DefineCustomObjectResponse>

  func setCubeLights(
    _ request: Anki_Vector_ExternalInterface_SetCubeLightsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetCubeLightsRequest, Anki_Vector_ExternalInterface_SetCubeLightsResponse>

  func audioFeed(
    _ request: Anki_Vector_ExternalInterface_AudioFeedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Anki_Vector_ExternalInterface_AudioFeedResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_AudioFeedRequest, Anki_Vector_ExternalInterface_AudioFeedResponse>

  func cameraFeed(
    _ request: Anki_Vector_ExternalInterface_CameraFeedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Anki_Vector_ExternalInterface_CameraFeedResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_CameraFeedRequest, Anki_Vector_ExternalInterface_CameraFeedResponse>

  func captureSingleImage(
    _ request: Anki_Vector_ExternalInterface_CaptureSingleImageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CaptureSingleImageRequest, Anki_Vector_ExternalInterface_CaptureSingleImageResponse>

  func setEyeColor(
    _ request: Anki_Vector_ExternalInterface_SetEyeColorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetEyeColorRequest, Anki_Vector_ExternalInterface_SetEyeColorResponse>

  func navMapFeed(
    _ request: Anki_Vector_ExternalInterface_NavMapFeedRequest,
    callOptions: CallOptions?,
    handler: @escaping (Anki_Vector_ExternalInterface_NavMapFeedResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_NavMapFeedRequest, Anki_Vector_ExternalInterface_NavMapFeedResponse>
}

extension Anki_Vector_ExternalInterface_ExternalInterfaceClientProtocol {
  internal var serviceName: String {
    return "Anki.Vector.external_interface.ExternalInterface"
  }

  /// Checks the supported protocol version by passing in the client version and
  /// minimum host version and receiving a response to see whether the versions are supported.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProtocolVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func protocolVersion(
    _ request: Anki_Vector_ExternalInterface_ProtocolVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ProtocolVersionRequest, Anki_Vector_ExternalInterface_ProtocolVersionResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.protocolVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProtocolVersionInterceptors() ?? []
    )
  }

  /// SDK-only message to pass version info for device OS, Python version, etc.
  ///
  /// - Parameters:
  ///   - request: Request to send to SDKInitialization.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sDKInitialization(
    _ request: Anki_Vector_ExternalInterface_SDKInitializationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SDKInitializationRequest, Anki_Vector_ExternalInterface_SDKInitializationResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.sDKInitialization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSDKInitializationInterceptors() ?? []
    )
  }

  /// Sets the speed and acceleration for Vector's wheel motors.
  ///
  /// - Parameters:
  ///   - request: Request to send to DriveWheels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func driveWheels(
    _ request: Anki_Vector_ExternalInterface_DriveWheelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DriveWheelsRequest, Anki_Vector_ExternalInterface_DriveWheelsResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveWheels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveWheelsInterceptors() ?? []
    )
  }

  /// Requests that Vector play an animation trigger.
  ///
  /// - Parameters:
  ///   - request: Request to send to PlayAnimationTrigger.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func playAnimationTrigger(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.playAnimationTrigger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlayAnimationTriggerInterceptors() ?? []
    )
  }

  /// Requests that Vector play an animation.
  ///
  /// - Parameters:
  ///   - request: Request to send to PlayAnimation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func playAnimation(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PlayAnimationRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.playAnimation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlayAnimationInterceptors() ?? []
    )
  }

  /// Constructs and returns a list of animations.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAnimations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listAnimations(
    _ request: Anki_Vector_ExternalInterface_ListAnimationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ListAnimationsRequest, Anki_Vector_ExternalInterface_ListAnimationsResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.listAnimations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAnimationsInterceptors() ?? []
    )
  }

  /// Constructs and returns a list of animation triggers.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAnimationTriggers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listAnimationTriggers(
    _ request: Anki_Vector_ExternalInterface_ListAnimationTriggersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ListAnimationTriggersRequest, Anki_Vector_ExternalInterface_ListAnimationTriggersResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.listAnimationTriggers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAnimationTriggersInterceptors() ?? []
    )
  }

  /// Moves Vector's head.
  ///
  /// - Parameters:
  ///   - request: Request to send to MoveHead.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moveHead(
    _ request: Anki_Vector_ExternalInterface_MoveHeadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_MoveHeadRequest, Anki_Vector_ExternalInterface_MoveHeadResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.moveHead.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveHeadInterceptors() ?? []
    )
  }

  /// Moves Vector's lift.
  ///
  /// - Parameters:
  ///   - request: Request to send to MoveLift.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moveLift(
    _ request: Anki_Vector_ExternalInterface_MoveLiftRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_MoveLiftRequest, Anki_Vector_ExternalInterface_MoveLiftResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.moveLift.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveLiftInterceptors() ?? []
    )
  }

  /// Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
  ///
  /// - Parameters:
  ///   - request: Request to send to StopAllMotors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stopAllMotors(
    _ request: Anki_Vector_ExternalInterface_StopAllMotorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_StopAllMotorsRequest, Anki_Vector_ExternalInterface_StopAllMotorsResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.stopAllMotors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopAllMotorsInterceptors() ?? []
    )
  }

  /// Sets screen (Vector's face) to a solid color.
  ///
  /// - Parameters:
  ///   - request: Request to send to DisplayFaceImageRGB.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func displayFaceImageRGB(
    _ request: Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest, Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.displayFaceImageRGB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisplayFaceImageRGBInterceptors() ?? []
    )
  }

  /// Streaming events endpoint
  ///
  /// - Parameters:
  ///   - request: Request to send to EventStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func eventStream(
    _ request: Anki_Vector_ExternalInterface_EventRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Anki_Vector_ExternalInterface_EventResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_EventRequest, Anki_Vector_ExternalInterface_EventResponse> {
    return self.makeServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eventStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventStreamInterceptors() ?? [],
      handler: handler
    )
  }

  /// Play audio using Vector's speaker
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func externalAudioStreamPlayback(
    callOptions: CallOptions? = nil,
    handler: @escaping (Anki_Vector_ExternalInterface_ExternalAudioStreamResponse) -> Void
  ) -> BidirectionalStreamingCall<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest, Anki_Vector_ExternalInterface_ExternalAudioStreamResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.externalAudioStreamPlayback.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExternalAudioStreamPlaybackInterceptors() ?? [],
      handler: handler
    )
  }

  /// Integrate with and acquire control of Vector's AI system.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func behaviorControl(
    callOptions: CallOptions? = nil,
    handler: @escaping (Anki_Vector_ExternalInterface_BehaviorControlResponse) -> Void
  ) -> BidirectionalStreamingCall<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.behaviorControl.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBehaviorControlInterceptors() ?? [],
      handler: handler
    )
  }

  /// Acquire control of Vector's AI system.
  ///
  /// - Parameters:
  ///   - request: Request to send to AssumeBehaviorControl.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func assumeBehaviorControl(
    _ request: Anki_Vector_ExternalInterface_BehaviorControlRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Anki_Vector_ExternalInterface_BehaviorControlResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse> {
    return self.makeServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.assumeBehaviorControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssumeBehaviorControlInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to CancelFaceEnrollment
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelFaceEnrollment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelFaceEnrollment(
    _ request: Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest, Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cancelFaceEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelFaceEnrollmentInterceptors() ?? []
    )
  }

  /// Get a list of names and their IDs.
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestEnrolledNames.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestEnrolledNames(
    _ request: Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest, Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.requestEnrolledNames.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestEnrolledNamesInterceptors() ?? []
    )
  }

  /// Update the name enrolled for a given face.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateEnrolledFaceByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateEnrolledFaceByID(
    _ request: Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.updateEnrolledFaceByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrolledFaceByIDInterceptors() ?? []
    )
  }

  /// Erase the enrollment (name) record for the face with this ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to EraseEnrolledFaceByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eraseEnrolledFaceByID(
    _ request: Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eraseEnrolledFaceByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEraseEnrolledFaceByIDInterceptors() ?? []
    )
  }

  /// Erase the enrollment (name) records for all faces.
  ///
  /// - Parameters:
  ///   - request: Request to send to EraseAllEnrolledFaces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eraseAllEnrolledFaces(
    _ request: Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest, Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eraseAllEnrolledFaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEraseAllEnrolledFacesInterceptors() ?? []
    )
  }

  /// Unary call to SetFaceToEnroll
  ///
  /// - Parameters:
  ///   - request: Request to send to SetFaceToEnroll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setFaceToEnroll(
    _ request: Anki_Vector_ExternalInterface_SetFaceToEnrollRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetFaceToEnrollRequest, Anki_Vector_ExternalInterface_SetFaceToEnrollResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setFaceToEnroll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetFaceToEnrollInterceptors() ?? []
    )
  }

  /// Unary call to EnableMarkerDetection
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableMarkerDetection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableMarkerDetection(
    _ request: Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest, Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMarkerDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMarkerDetectionInterceptors() ?? []
    )
  }

  /// Unary call to EnableFaceDetection
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableFaceDetection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableFaceDetection(
    _ request: Anki_Vector_ExternalInterface_EnableFaceDetectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableFaceDetectionRequest, Anki_Vector_ExternalInterface_EnableFaceDetectionResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableFaceDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableFaceDetectionInterceptors() ?? []
    )
  }

  /// Unary call to EnableMotionDetection
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableMotionDetection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableMotionDetection(
    _ request: Anki_Vector_ExternalInterface_EnableMotionDetectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableMotionDetectionRequest, Anki_Vector_ExternalInterface_EnableMotionDetectionResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMotionDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMotionDetectionInterceptors() ?? []
    )
  }

  /// Unary call to EnableMirrorMode
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableMirrorMode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableMirrorMode(
    _ request: Anki_Vector_ExternalInterface_EnableMirrorModeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableMirrorModeRequest, Anki_Vector_ExternalInterface_EnableMirrorModeResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMirrorMode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMirrorModeInterceptors() ?? []
    )
  }

  /// Unary call to EnableImageStreaming
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableImageStreaming.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableImageStreaming(
    _ request: Anki_Vector_ExternalInterface_EnableImageStreamingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_EnableImageStreamingRequest, Anki_Vector_ExternalInterface_EnableImageStreamingResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableImageStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableImageStreamingInterceptors() ?? []
    )
  }

  /// Unary call to IsImageStreamingEnabled
  ///
  /// - Parameters:
  ///   - request: Request to send to IsImageStreamingEnabled.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isImageStreamingEnabled(
    _ request: Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest, Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.isImageStreamingEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsImageStreamingEnabledInterceptors() ?? []
    )
  }

  /// Cancel action by id
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelActionByIdTag.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelActionByIdTag(
    _ request: Anki_Vector_ExternalInterface_CancelActionByIdTagRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CancelActionByIdTagRequest, Anki_Vector_ExternalInterface_CancelActionByIdTagResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cancelActionByIdTag.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelActionByIdTagInterceptors() ?? []
    )
  }

  /// Tells Vector to drive to the specified pose and orientation.
  ///
  /// - Parameters:
  ///   - request: Request to send to GoToPose.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func goToPose(
    _ request: Anki_Vector_ExternalInterface_GoToPoseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_GoToPoseRequest, Anki_Vector_ExternalInterface_GoToPoseResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.goToPose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGoToPoseInterceptors() ?? []
    )
  }

  /// Tells Vector to dock with a light cube with a given approach angle and distance.
  ///
  /// - Parameters:
  ///   - request: Request to send to DockWithCube.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dockWithCube(
    _ request: Anki_Vector_ExternalInterface_DockWithCubeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DockWithCubeRequest, Anki_Vector_ExternalInterface_DockWithCubeResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.dockWithCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDockWithCubeInterceptors() ?? []
    )
  }

  /// Drive Vector off the charger.
  ///
  /// - Parameters:
  ///   - request: Request to send to DriveOffCharger.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func driveOffCharger(
    _ request: Anki_Vector_ExternalInterface_DriveOffChargerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DriveOffChargerRequest, Anki_Vector_ExternalInterface_DriveOffChargerResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveOffCharger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveOffChargerInterceptors() ?? []
    )
  }

  /// Drive Vector onto the charger.
  ///
  /// - Parameters:
  ///   - request: Request to send to DriveOnCharger.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func driveOnCharger(
    _ request: Anki_Vector_ExternalInterface_DriveOnChargerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DriveOnChargerRequest, Anki_Vector_ExternalInterface_DriveOnChargerResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveOnCharger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveOnChargerInterceptors() ?? []
    )
  }

  /// Make Vector look for faces by turning and angling his head
  ///
  /// - Parameters:
  ///   - request: Request to send to FindFaces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func findFaces(
    _ request: Anki_Vector_ExternalInterface_FindFacesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_FindFacesRequest, Anki_Vector_ExternalInterface_FindFacesResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.findFaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindFacesInterceptors() ?? []
    )
  }

  /// Make Vector look around in place by turning and moving his head
  ///
  /// - Parameters:
  ///   - request: Request to send to LookAroundInPlace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lookAroundInPlace(
    _ request: Anki_Vector_ExternalInterface_LookAroundInPlaceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_LookAroundInPlaceRequest, Anki_Vector_ExternalInterface_LookAroundInPlaceResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.lookAroundInPlace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLookAroundInPlaceInterceptors() ?? []
    )
  }

  /// Make Vector roll his block, regardless of relative position and orientation
  ///
  /// - Parameters:
  ///   - request: Request to send to RollBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rollBlock(
    _ request: Anki_Vector_ExternalInterface_RollBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_RollBlockRequest, Anki_Vector_ExternalInterface_RollBlockResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.rollBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollBlockInterceptors() ?? []
    )
  }

  /// Get the photos info.
  ///
  /// - Parameters:
  ///   - request: Request to send to PhotosInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func photosInfo(
    _ request: Anki_Vector_ExternalInterface_PhotosInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PhotosInfoRequest, Anki_Vector_ExternalInterface_PhotosInfoResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.photosInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhotosInfoInterceptors() ?? []
    )
  }

  /// Get a photo by ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Photo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func photo(
    _ request: Anki_Vector_ExternalInterface_PhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PhotoRequest, Anki_Vector_ExternalInterface_PhotoResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.photo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhotoInterceptors() ?? []
    )
  }

  /// Get a thumbnail by ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Thumbnail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func thumbnail(
    _ request: Anki_Vector_ExternalInterface_ThumbnailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ThumbnailRequest, Anki_Vector_ExternalInterface_ThumbnailResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.thumbnail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeThumbnailInterceptors() ?? []
    )
  }

  /// Delete a photo by ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeletePhoto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deletePhoto(
    _ request: Anki_Vector_ExternalInterface_DeletePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DeletePhotoRequest, Anki_Vector_ExternalInterface_DeletePhotoResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.deletePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeletePhotoInterceptors() ?? []
    )
  }

  /// Tells Vector to drive in a straight line.
  ///
  /// - Parameters:
  ///   - request: Request to send to DriveStraight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func driveStraight(
    _ request: Anki_Vector_ExternalInterface_DriveStraightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DriveStraightRequest, Anki_Vector_ExternalInterface_DriveStraightResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveStraight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveStraightInterceptors() ?? []
    )
  }

  /// Turn the robot around its current position.
  ///
  /// - Parameters:
  ///   - request: Request to send to TurnInPlace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func turnInPlace(
    _ request: Anki_Vector_ExternalInterface_TurnInPlaceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_TurnInPlaceRequest, Anki_Vector_ExternalInterface_TurnInPlaceResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.turnInPlace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTurnInPlaceInterceptors() ?? []
    )
  }

  /// Tell Vector's head to move to a given angle.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetHeadAngle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setHeadAngle(
    _ request: Anki_Vector_ExternalInterface_SetHeadAngleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetHeadAngleRequest, Anki_Vector_ExternalInterface_SetHeadAngleResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setHeadAngle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetHeadAngleInterceptors() ?? []
    )
  }

  /// Tell Vector's lift to move to a given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLiftHeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setLiftHeight(
    _ request: Anki_Vector_ExternalInterface_SetLiftHeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetLiftHeightRequest, Anki_Vector_ExternalInterface_SetLiftHeightResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setLiftHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLiftHeightInterceptors() ?? []
    )
  }

  /// Tell Vector to turn towards this face.
  ///
  /// - Parameters:
  ///   - request: Request to send to TurnTowardsFace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func turnTowardsFace(
    _ request: Anki_Vector_ExternalInterface_TurnTowardsFaceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_TurnTowardsFaceRequest, Anki_Vector_ExternalInterface_TurnTowardsFaceResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.turnTowardsFace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTurnTowardsFaceInterceptors() ?? []
    )
  }

  /// Tell Vector to drive to the specified object.
  ///
  /// - Parameters:
  ///   - request: Request to send to GoToObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func goToObject(
    _ request: Anki_Vector_ExternalInterface_GoToObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_GoToObjectRequest, Anki_Vector_ExternalInterface_GoToObjectResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.goToObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGoToObjectInterceptors() ?? []
    )
  }

  /// Tell Vector to roll his cube.
  ///
  /// - Parameters:
  ///   - request: Request to send to RollObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rollObject(
    _ request: Anki_Vector_ExternalInterface_RollObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_RollObjectRequest, Anki_Vector_ExternalInterface_RollObjectResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.rollObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollObjectInterceptors() ?? []
    )
  }

  /// Tell Vector to "pop a wheelie" using his cube.
  ///
  /// - Parameters:
  ///   - request: Request to send to PopAWheelie.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func popAWheelie(
    _ request: Anki_Vector_ExternalInterface_PopAWheelieRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PopAWheelieRequest, Anki_Vector_ExternalInterface_PopAWheelieResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.popAWheelie.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePopAWheelieInterceptors() ?? []
    )
  }

  /// Instruct the robot to pick up the supplied object.
  ///
  /// - Parameters:
  ///   - request: Request to send to PickupObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pickupObject(
    _ request: Anki_Vector_ExternalInterface_PickupObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PickupObjectRequest, Anki_Vector_ExternalInterface_PickupObjectResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.pickupObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePickupObjectInterceptors() ?? []
    )
  }

  /// Ask Vector to place the object he is carrying on the ground at the current location.
  ///
  /// - Parameters:
  ///   - request: Request to send to PlaceObjectOnGroundHere.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func placeObjectOnGroundHere(
    _ request: Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest, Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.placeObjectOnGroundHere.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlaceObjectOnGroundHereInterceptors() ?? []
    )
  }

  /// Set the Robot's master volume
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMasterVolume.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setMasterVolume(
    _ request: Anki_Vector_ExternalInterface_MasterVolumeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_MasterVolumeRequest, Anki_Vector_ExternalInterface_MasterVolumeResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setMasterVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMasterVolumeInterceptors() ?? []
    )
  }

  /// Unary call to UserAuthentication
  ///
  /// - Parameters:
  ///   - request: Request to send to UserAuthentication.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userAuthentication(
    _ request: Anki_Vector_ExternalInterface_UserAuthenticationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_UserAuthenticationRequest, Anki_Vector_ExternalInterface_UserAuthenticationResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.userAuthentication.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserAuthenticationInterceptors() ?? []
    )
  }

  /// Check the current state of the battery.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatteryState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batteryState(
    _ request: Anki_Vector_ExternalInterface_BatteryStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_BatteryStateRequest, Anki_Vector_ExternalInterface_BatteryStateResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.batteryState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatteryStateInterceptors() ?? []
    )
  }

  /// Get the versioning information for Vector.
  ///
  /// - Parameters:
  ///   - request: Request to send to VersionState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func versionState(
    _ request: Anki_Vector_ExternalInterface_VersionStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_VersionStateRequest, Anki_Vector_ExternalInterface_VersionStateResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.versionState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVersionStateInterceptors() ?? []
    )
  }

  /// Make Vector speak text.
  ///
  /// - Parameters:
  ///   - request: Request to send to SayText.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayText(
    _ request: Anki_Vector_ExternalInterface_SayTextRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SayTextRequest, Anki_Vector_ExternalInterface_SayTextResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.sayText.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayTextInterceptors() ?? []
    )
  }

  /// Attempt to connect to a cube. If a cube is currently connected,
  /// this will do nothing.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectCube.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func connectCube(
    _ request: Anki_Vector_ExternalInterface_ConnectCubeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ConnectCubeRequest, Anki_Vector_ExternalInterface_ConnectCubeResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.connectCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectCubeInterceptors() ?? []
    )
  }

  /// Requests a disconnection from the currently connected cube.
  ///
  /// - Parameters:
  ///   - request: Request to send to DisconnectCube.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disconnectCube(
    _ request: Anki_Vector_ExternalInterface_DisconnectCubeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DisconnectCubeRequest, Anki_Vector_ExternalInterface_DisconnectCubeResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.disconnectCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisconnectCubeInterceptors() ?? []
    )
  }

  /// Unary call to CubesAvailable
  ///
  /// - Parameters:
  ///   - request: Request to send to CubesAvailable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cubesAvailable(
    _ request: Anki_Vector_ExternalInterface_CubesAvailableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CubesAvailableRequest, Anki_Vector_ExternalInterface_CubesAvailableResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cubesAvailable.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCubesAvailableInterceptors() ?? []
    )
  }

  /// Signal a connected cube to flash its lights using the default cube
  /// flash animation.
  ///
  /// - Parameters:
  ///   - request: Request to send to FlashCubeLights.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func flashCubeLights(
    _ request: Anki_Vector_ExternalInterface_FlashCubeLightsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_FlashCubeLightsRequest, Anki_Vector_ExternalInterface_FlashCubeLightsResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.flashCubeLights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlashCubeLightsInterceptors() ?? []
    )
  }

  /// Forget the robot's preferred cube. This will cause the robot to
  /// connect to the cube with the highest RSSI (signal strength) next
  /// time a connection is requested. Saves this preference to disk.
  /// The next cube that the robot connects to will become its
  /// preferred cube.
  ///
  /// - Parameters:
  ///   - request: Request to send to ForgetPreferredCube.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func forgetPreferredCube(
    _ request: Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest, Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.forgetPreferredCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeForgetPreferredCubeInterceptors() ?? []
    )
  }

  /// Set the robot's preferred cube and save it to disk. The robot
  /// will always attempt to connect to this cube if it is available.
  /// This is only used in simulation for now.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPreferredCube.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPreferredCube(
    _ request: Anki_Vector_ExternalInterface_SetPreferredCubeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetPreferredCubeRequest, Anki_Vector_ExternalInterface_SetPreferredCubeResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setPreferredCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPreferredCubeInterceptors() ?? []
    )
  }

  /// Causes the robot to forget about custom objects it currently knows about.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCustomObjects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteCustomObjects(
    _ request: Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest, Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.deleteCustomObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCustomObjectsInterceptors() ?? []
    )
  }

  /// Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFixedCustomObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFixedCustomObject(
    _ request: Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest, Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.createFixedCustomObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFixedCustomObjectInterceptors() ?? []
    )
  }

  /// Creates a custom object with distinct custom marker(s).
  ///
  /// - Parameters:
  ///   - request: Request to send to DefineCustomObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func defineCustomObject(
    _ request: Anki_Vector_ExternalInterface_DefineCustomObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_DefineCustomObjectRequest, Anki_Vector_ExternalInterface_DefineCustomObjectResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.defineCustomObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefineCustomObjectInterceptors() ?? []
    )
  }

  /// Set each of the lights on the currently connected cube based on two
  /// rgb values each and timing data for how to transition between them.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCubeLights.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setCubeLights(
    _ request: Anki_Vector_ExternalInterface_SetCubeLightsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetCubeLightsRequest, Anki_Vector_ExternalInterface_SetCubeLightsResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setCubeLights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCubeLightsInterceptors() ?? []
    )
  }

  /// Request an audio feed from the robot.
  ///
  /// - Parameters:
  ///   - request: Request to send to AudioFeed.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func audioFeed(
    _ request: Anki_Vector_ExternalInterface_AudioFeedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Anki_Vector_ExternalInterface_AudioFeedResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_AudioFeedRequest, Anki_Vector_ExternalInterface_AudioFeedResponse> {
    return self.makeServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.audioFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAudioFeedInterceptors() ?? [],
      handler: handler
    )
  }

  /// Request a camera feed from the robot.
  ///
  /// - Parameters:
  ///   - request: Request to send to CameraFeed.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func cameraFeed(
    _ request: Anki_Vector_ExternalInterface_CameraFeedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Anki_Vector_ExternalInterface_CameraFeedResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_CameraFeedRequest, Anki_Vector_ExternalInterface_CameraFeedResponse> {
    return self.makeServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cameraFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCameraFeedInterceptors() ?? [],
      handler: handler
    )
  }

  /// Request a single image to be captured and sent from the robot.
  ///
  /// - Parameters:
  ///   - request: Request to send to CaptureSingleImage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func captureSingleImage(
    _ request: Anki_Vector_ExternalInterface_CaptureSingleImageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_CaptureSingleImageRequest, Anki_Vector_ExternalInterface_CaptureSingleImageResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.captureSingleImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCaptureSingleImageInterceptors() ?? []
    )
  }

  /// Set Vector's eye color.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetEyeColor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setEyeColor(
    _ request: Anki_Vector_ExternalInterface_SetEyeColorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Anki_Vector_ExternalInterface_SetEyeColorRequest, Anki_Vector_ExternalInterface_SetEyeColorResponse> {
    return self.makeUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setEyeColor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetEyeColorInterceptors() ?? []
    )
  }

  /// Stream navigation map data.
  ///
  /// - Parameters:
  ///   - request: Request to send to NavMapFeed.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func navMapFeed(
    _ request: Anki_Vector_ExternalInterface_NavMapFeedRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Anki_Vector_ExternalInterface_NavMapFeedResponse) -> Void
  ) -> ServerStreamingCall<Anki_Vector_ExternalInterface_NavMapFeedRequest, Anki_Vector_ExternalInterface_NavMapFeedResponse> {
    return self.makeServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.navMapFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNavMapFeedInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Anki_Vector_ExternalInterface_ExternalInterfaceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Anki_Vector_ExternalInterface_ExternalInterfaceNIOClient")
internal final class Anki_Vector_ExternalInterface_ExternalInterfaceClient: Anki_Vector_ExternalInterface_ExternalInterfaceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the Anki.Vector.external_interface.ExternalInterface service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Anki_Vector_ExternalInterface_ExternalInterfaceNIOClient: Anki_Vector_ExternalInterface_ExternalInterfaceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol?

  /// Creates a client for the Anki.Vector.external_interface.ExternalInterface service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// The grpc-defined connection between the SDK and Anki's Vector robot.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Anki_Vector_ExternalInterface_ExternalInterfaceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol? { get }

  func makeProtocolVersionCall(
    _ request: Anki_Vector_ExternalInterface_ProtocolVersionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ProtocolVersionRequest, Anki_Vector_ExternalInterface_ProtocolVersionResponse>

  func makeSdkinitializationCall(
    _ request: Anki_Vector_ExternalInterface_SDKInitializationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SDKInitializationRequest, Anki_Vector_ExternalInterface_SDKInitializationResponse>

  func makeDriveWheelsCall(
    _ request: Anki_Vector_ExternalInterface_DriveWheelsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DriveWheelsRequest, Anki_Vector_ExternalInterface_DriveWheelsResponse>

  func makePlayAnimationTriggerCall(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse>

  func makePlayAnimationCall(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PlayAnimationRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse>

  func makeListAnimationsCall(
    _ request: Anki_Vector_ExternalInterface_ListAnimationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ListAnimationsRequest, Anki_Vector_ExternalInterface_ListAnimationsResponse>

  func makeListAnimationTriggersCall(
    _ request: Anki_Vector_ExternalInterface_ListAnimationTriggersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ListAnimationTriggersRequest, Anki_Vector_ExternalInterface_ListAnimationTriggersResponse>

  func makeMoveHeadCall(
    _ request: Anki_Vector_ExternalInterface_MoveHeadRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_MoveHeadRequest, Anki_Vector_ExternalInterface_MoveHeadResponse>

  func makeMoveLiftCall(
    _ request: Anki_Vector_ExternalInterface_MoveLiftRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_MoveLiftRequest, Anki_Vector_ExternalInterface_MoveLiftResponse>

  func makeStopAllMotorsCall(
    _ request: Anki_Vector_ExternalInterface_StopAllMotorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_StopAllMotorsRequest, Anki_Vector_ExternalInterface_StopAllMotorsResponse>

  func makeDisplayFaceImageRgbCall(
    _ request: Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest, Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse>

  func makeEventStreamCall(
    _ request: Anki_Vector_ExternalInterface_EventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_EventRequest, Anki_Vector_ExternalInterface_EventResponse>

  func makeExternalAudioStreamPlaybackCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest, Anki_Vector_ExternalInterface_ExternalAudioStreamResponse>

  func makeBehaviorControlCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse>

  func makeAssumeBehaviorControlCall(
    _ request: Anki_Vector_ExternalInterface_BehaviorControlRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse>

  func makeCancelFaceEnrollmentCall(
    _ request: Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest, Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse>

  func makeRequestEnrolledNamesCall(
    _ request: Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest, Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse>

  func makeUpdateEnrolledFaceByIDCall(
    _ request: Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse>

  func makeEraseEnrolledFaceByIDCall(
    _ request: Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse>

  func makeEraseAllEnrolledFacesCall(
    _ request: Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest, Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse>

  func makeSetFaceToEnrollCall(
    _ request: Anki_Vector_ExternalInterface_SetFaceToEnrollRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetFaceToEnrollRequest, Anki_Vector_ExternalInterface_SetFaceToEnrollResponse>

  func makeEnableMarkerDetectionCall(
    _ request: Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest, Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse>

  func makeEnableFaceDetectionCall(
    _ request: Anki_Vector_ExternalInterface_EnableFaceDetectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableFaceDetectionRequest, Anki_Vector_ExternalInterface_EnableFaceDetectionResponse>

  func makeEnableMotionDetectionCall(
    _ request: Anki_Vector_ExternalInterface_EnableMotionDetectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableMotionDetectionRequest, Anki_Vector_ExternalInterface_EnableMotionDetectionResponse>

  func makeEnableMirrorModeCall(
    _ request: Anki_Vector_ExternalInterface_EnableMirrorModeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableMirrorModeRequest, Anki_Vector_ExternalInterface_EnableMirrorModeResponse>

  func makeEnableImageStreamingCall(
    _ request: Anki_Vector_ExternalInterface_EnableImageStreamingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableImageStreamingRequest, Anki_Vector_ExternalInterface_EnableImageStreamingResponse>

  func makeIsImageStreamingEnabledCall(
    _ request: Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest, Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse>

  func makeCancelActionByIDTagCall(
    _ request: Anki_Vector_ExternalInterface_CancelActionByIdTagRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CancelActionByIdTagRequest, Anki_Vector_ExternalInterface_CancelActionByIdTagResponse>

  func makeGoToPoseCall(
    _ request: Anki_Vector_ExternalInterface_GoToPoseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_GoToPoseRequest, Anki_Vector_ExternalInterface_GoToPoseResponse>

  func makeDockWithCubeCall(
    _ request: Anki_Vector_ExternalInterface_DockWithCubeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DockWithCubeRequest, Anki_Vector_ExternalInterface_DockWithCubeResponse>

  func makeDriveOffChargerCall(
    _ request: Anki_Vector_ExternalInterface_DriveOffChargerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DriveOffChargerRequest, Anki_Vector_ExternalInterface_DriveOffChargerResponse>

  func makeDriveOnChargerCall(
    _ request: Anki_Vector_ExternalInterface_DriveOnChargerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DriveOnChargerRequest, Anki_Vector_ExternalInterface_DriveOnChargerResponse>

  func makeFindFacesCall(
    _ request: Anki_Vector_ExternalInterface_FindFacesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_FindFacesRequest, Anki_Vector_ExternalInterface_FindFacesResponse>

  func makeLookAroundInPlaceCall(
    _ request: Anki_Vector_ExternalInterface_LookAroundInPlaceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_LookAroundInPlaceRequest, Anki_Vector_ExternalInterface_LookAroundInPlaceResponse>

  func makeRollBlockCall(
    _ request: Anki_Vector_ExternalInterface_RollBlockRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_RollBlockRequest, Anki_Vector_ExternalInterface_RollBlockResponse>

  func makePhotosInfoCall(
    _ request: Anki_Vector_ExternalInterface_PhotosInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PhotosInfoRequest, Anki_Vector_ExternalInterface_PhotosInfoResponse>

  func makePhotoCall(
    _ request: Anki_Vector_ExternalInterface_PhotoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PhotoRequest, Anki_Vector_ExternalInterface_PhotoResponse>

  func makeThumbnailCall(
    _ request: Anki_Vector_ExternalInterface_ThumbnailRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ThumbnailRequest, Anki_Vector_ExternalInterface_ThumbnailResponse>

  func makeDeletePhotoCall(
    _ request: Anki_Vector_ExternalInterface_DeletePhotoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DeletePhotoRequest, Anki_Vector_ExternalInterface_DeletePhotoResponse>

  func makeDriveStraightCall(
    _ request: Anki_Vector_ExternalInterface_DriveStraightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DriveStraightRequest, Anki_Vector_ExternalInterface_DriveStraightResponse>

  func makeTurnInPlaceCall(
    _ request: Anki_Vector_ExternalInterface_TurnInPlaceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_TurnInPlaceRequest, Anki_Vector_ExternalInterface_TurnInPlaceResponse>

  func makeSetHeadAngleCall(
    _ request: Anki_Vector_ExternalInterface_SetHeadAngleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetHeadAngleRequest, Anki_Vector_ExternalInterface_SetHeadAngleResponse>

  func makeSetLiftHeightCall(
    _ request: Anki_Vector_ExternalInterface_SetLiftHeightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetLiftHeightRequest, Anki_Vector_ExternalInterface_SetLiftHeightResponse>

  func makeTurnTowardsFaceCall(
    _ request: Anki_Vector_ExternalInterface_TurnTowardsFaceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_TurnTowardsFaceRequest, Anki_Vector_ExternalInterface_TurnTowardsFaceResponse>

  func makeGoToObjectCall(
    _ request: Anki_Vector_ExternalInterface_GoToObjectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_GoToObjectRequest, Anki_Vector_ExternalInterface_GoToObjectResponse>

  func makeRollObjectCall(
    _ request: Anki_Vector_ExternalInterface_RollObjectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_RollObjectRequest, Anki_Vector_ExternalInterface_RollObjectResponse>

  func makePopAwheelieCall(
    _ request: Anki_Vector_ExternalInterface_PopAWheelieRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PopAWheelieRequest, Anki_Vector_ExternalInterface_PopAWheelieResponse>

  func makePickupObjectCall(
    _ request: Anki_Vector_ExternalInterface_PickupObjectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PickupObjectRequest, Anki_Vector_ExternalInterface_PickupObjectResponse>

  func makePlaceObjectOnGroundHereCall(
    _ request: Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest, Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse>

  func makeSetMasterVolumeCall(
    _ request: Anki_Vector_ExternalInterface_MasterVolumeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_MasterVolumeRequest, Anki_Vector_ExternalInterface_MasterVolumeResponse>

  func makeUserAuthenticationCall(
    _ request: Anki_Vector_ExternalInterface_UserAuthenticationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_UserAuthenticationRequest, Anki_Vector_ExternalInterface_UserAuthenticationResponse>

  func makeBatteryStateCall(
    _ request: Anki_Vector_ExternalInterface_BatteryStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_BatteryStateRequest, Anki_Vector_ExternalInterface_BatteryStateResponse>

  func makeVersionStateCall(
    _ request: Anki_Vector_ExternalInterface_VersionStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_VersionStateRequest, Anki_Vector_ExternalInterface_VersionStateResponse>

  func makeSayTextCall(
    _ request: Anki_Vector_ExternalInterface_SayTextRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SayTextRequest, Anki_Vector_ExternalInterface_SayTextResponse>

  func makeConnectCubeCall(
    _ request: Anki_Vector_ExternalInterface_ConnectCubeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ConnectCubeRequest, Anki_Vector_ExternalInterface_ConnectCubeResponse>

  func makeDisconnectCubeCall(
    _ request: Anki_Vector_ExternalInterface_DisconnectCubeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DisconnectCubeRequest, Anki_Vector_ExternalInterface_DisconnectCubeResponse>

  func makeCubesAvailableCall(
    _ request: Anki_Vector_ExternalInterface_CubesAvailableRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CubesAvailableRequest, Anki_Vector_ExternalInterface_CubesAvailableResponse>

  func makeFlashCubeLightsCall(
    _ request: Anki_Vector_ExternalInterface_FlashCubeLightsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_FlashCubeLightsRequest, Anki_Vector_ExternalInterface_FlashCubeLightsResponse>

  func makeForgetPreferredCubeCall(
    _ request: Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest, Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse>

  func makeSetPreferredCubeCall(
    _ request: Anki_Vector_ExternalInterface_SetPreferredCubeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetPreferredCubeRequest, Anki_Vector_ExternalInterface_SetPreferredCubeResponse>

  func makeDeleteCustomObjectsCall(
    _ request: Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest, Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse>

  func makeCreateFixedCustomObjectCall(
    _ request: Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest, Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse>

  func makeDefineCustomObjectCall(
    _ request: Anki_Vector_ExternalInterface_DefineCustomObjectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DefineCustomObjectRequest, Anki_Vector_ExternalInterface_DefineCustomObjectResponse>

  func makeSetCubeLightsCall(
    _ request: Anki_Vector_ExternalInterface_SetCubeLightsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetCubeLightsRequest, Anki_Vector_ExternalInterface_SetCubeLightsResponse>

  func makeAudioFeedCall(
    _ request: Anki_Vector_ExternalInterface_AudioFeedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_AudioFeedRequest, Anki_Vector_ExternalInterface_AudioFeedResponse>

  func makeCameraFeedCall(
    _ request: Anki_Vector_ExternalInterface_CameraFeedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_CameraFeedRequest, Anki_Vector_ExternalInterface_CameraFeedResponse>

  func makeCaptureSingleImageCall(
    _ request: Anki_Vector_ExternalInterface_CaptureSingleImageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CaptureSingleImageRequest, Anki_Vector_ExternalInterface_CaptureSingleImageResponse>

  func makeSetEyeColorCall(
    _ request: Anki_Vector_ExternalInterface_SetEyeColorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetEyeColorRequest, Anki_Vector_ExternalInterface_SetEyeColorResponse>

  func makeNavMapFeedCall(
    _ request: Anki_Vector_ExternalInterface_NavMapFeedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_NavMapFeedRequest, Anki_Vector_ExternalInterface_NavMapFeedResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Anki_Vector_ExternalInterface_ExternalInterfaceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeProtocolVersionCall(
    _ request: Anki_Vector_ExternalInterface_ProtocolVersionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ProtocolVersionRequest, Anki_Vector_ExternalInterface_ProtocolVersionResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.protocolVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProtocolVersionInterceptors() ?? []
    )
  }

  internal func makeSdkinitializationCall(
    _ request: Anki_Vector_ExternalInterface_SDKInitializationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SDKInitializationRequest, Anki_Vector_ExternalInterface_SDKInitializationResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.sDKInitialization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSDKInitializationInterceptors() ?? []
    )
  }

  internal func makeDriveWheelsCall(
    _ request: Anki_Vector_ExternalInterface_DriveWheelsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DriveWheelsRequest, Anki_Vector_ExternalInterface_DriveWheelsResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveWheels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveWheelsInterceptors() ?? []
    )
  }

  internal func makePlayAnimationTriggerCall(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.playAnimationTrigger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlayAnimationTriggerInterceptors() ?? []
    )
  }

  internal func makePlayAnimationCall(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PlayAnimationRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.playAnimation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlayAnimationInterceptors() ?? []
    )
  }

  internal func makeListAnimationsCall(
    _ request: Anki_Vector_ExternalInterface_ListAnimationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ListAnimationsRequest, Anki_Vector_ExternalInterface_ListAnimationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.listAnimations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAnimationsInterceptors() ?? []
    )
  }

  internal func makeListAnimationTriggersCall(
    _ request: Anki_Vector_ExternalInterface_ListAnimationTriggersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ListAnimationTriggersRequest, Anki_Vector_ExternalInterface_ListAnimationTriggersResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.listAnimationTriggers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAnimationTriggersInterceptors() ?? []
    )
  }

  internal func makeMoveHeadCall(
    _ request: Anki_Vector_ExternalInterface_MoveHeadRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_MoveHeadRequest, Anki_Vector_ExternalInterface_MoveHeadResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.moveHead.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveHeadInterceptors() ?? []
    )
  }

  internal func makeMoveLiftCall(
    _ request: Anki_Vector_ExternalInterface_MoveLiftRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_MoveLiftRequest, Anki_Vector_ExternalInterface_MoveLiftResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.moveLift.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveLiftInterceptors() ?? []
    )
  }

  internal func makeStopAllMotorsCall(
    _ request: Anki_Vector_ExternalInterface_StopAllMotorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_StopAllMotorsRequest, Anki_Vector_ExternalInterface_StopAllMotorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.stopAllMotors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopAllMotorsInterceptors() ?? []
    )
  }

  internal func makeDisplayFaceImageRgbCall(
    _ request: Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest, Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.displayFaceImageRGB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisplayFaceImageRGBInterceptors() ?? []
    )
  }

  internal func makeEventStreamCall(
    _ request: Anki_Vector_ExternalInterface_EventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_EventRequest, Anki_Vector_ExternalInterface_EventResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eventStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventStreamInterceptors() ?? []
    )
  }

  internal func makeExternalAudioStreamPlaybackCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest, Anki_Vector_ExternalInterface_ExternalAudioStreamResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.externalAudioStreamPlayback.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExternalAudioStreamPlaybackInterceptors() ?? []
    )
  }

  internal func makeBehaviorControlCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.behaviorControl.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBehaviorControlInterceptors() ?? []
    )
  }

  internal func makeAssumeBehaviorControlCall(
    _ request: Anki_Vector_ExternalInterface_BehaviorControlRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.assumeBehaviorControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssumeBehaviorControlInterceptors() ?? []
    )
  }

  internal func makeCancelFaceEnrollmentCall(
    _ request: Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest, Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cancelFaceEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelFaceEnrollmentInterceptors() ?? []
    )
  }

  internal func makeRequestEnrolledNamesCall(
    _ request: Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest, Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.requestEnrolledNames.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestEnrolledNamesInterceptors() ?? []
    )
  }

  internal func makeUpdateEnrolledFaceByIDCall(
    _ request: Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.updateEnrolledFaceByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrolledFaceByIDInterceptors() ?? []
    )
  }

  internal func makeEraseEnrolledFaceByIDCall(
    _ request: Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eraseEnrolledFaceByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEraseEnrolledFaceByIDInterceptors() ?? []
    )
  }

  internal func makeEraseAllEnrolledFacesCall(
    _ request: Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest, Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eraseAllEnrolledFaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEraseAllEnrolledFacesInterceptors() ?? []
    )
  }

  internal func makeSetFaceToEnrollCall(
    _ request: Anki_Vector_ExternalInterface_SetFaceToEnrollRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetFaceToEnrollRequest, Anki_Vector_ExternalInterface_SetFaceToEnrollResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setFaceToEnroll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetFaceToEnrollInterceptors() ?? []
    )
  }

  internal func makeEnableMarkerDetectionCall(
    _ request: Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest, Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMarkerDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMarkerDetectionInterceptors() ?? []
    )
  }

  internal func makeEnableFaceDetectionCall(
    _ request: Anki_Vector_ExternalInterface_EnableFaceDetectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableFaceDetectionRequest, Anki_Vector_ExternalInterface_EnableFaceDetectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableFaceDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableFaceDetectionInterceptors() ?? []
    )
  }

  internal func makeEnableMotionDetectionCall(
    _ request: Anki_Vector_ExternalInterface_EnableMotionDetectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableMotionDetectionRequest, Anki_Vector_ExternalInterface_EnableMotionDetectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMotionDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMotionDetectionInterceptors() ?? []
    )
  }

  internal func makeEnableMirrorModeCall(
    _ request: Anki_Vector_ExternalInterface_EnableMirrorModeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableMirrorModeRequest, Anki_Vector_ExternalInterface_EnableMirrorModeResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMirrorMode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMirrorModeInterceptors() ?? []
    )
  }

  internal func makeEnableImageStreamingCall(
    _ request: Anki_Vector_ExternalInterface_EnableImageStreamingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_EnableImageStreamingRequest, Anki_Vector_ExternalInterface_EnableImageStreamingResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableImageStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableImageStreamingInterceptors() ?? []
    )
  }

  internal func makeIsImageStreamingEnabledCall(
    _ request: Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest, Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.isImageStreamingEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsImageStreamingEnabledInterceptors() ?? []
    )
  }

  internal func makeCancelActionByIDTagCall(
    _ request: Anki_Vector_ExternalInterface_CancelActionByIdTagRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CancelActionByIdTagRequest, Anki_Vector_ExternalInterface_CancelActionByIdTagResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cancelActionByIdTag.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelActionByIdTagInterceptors() ?? []
    )
  }

  internal func makeGoToPoseCall(
    _ request: Anki_Vector_ExternalInterface_GoToPoseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_GoToPoseRequest, Anki_Vector_ExternalInterface_GoToPoseResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.goToPose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGoToPoseInterceptors() ?? []
    )
  }

  internal func makeDockWithCubeCall(
    _ request: Anki_Vector_ExternalInterface_DockWithCubeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DockWithCubeRequest, Anki_Vector_ExternalInterface_DockWithCubeResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.dockWithCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDockWithCubeInterceptors() ?? []
    )
  }

  internal func makeDriveOffChargerCall(
    _ request: Anki_Vector_ExternalInterface_DriveOffChargerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DriveOffChargerRequest, Anki_Vector_ExternalInterface_DriveOffChargerResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveOffCharger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveOffChargerInterceptors() ?? []
    )
  }

  internal func makeDriveOnChargerCall(
    _ request: Anki_Vector_ExternalInterface_DriveOnChargerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DriveOnChargerRequest, Anki_Vector_ExternalInterface_DriveOnChargerResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveOnCharger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveOnChargerInterceptors() ?? []
    )
  }

  internal func makeFindFacesCall(
    _ request: Anki_Vector_ExternalInterface_FindFacesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_FindFacesRequest, Anki_Vector_ExternalInterface_FindFacesResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.findFaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindFacesInterceptors() ?? []
    )
  }

  internal func makeLookAroundInPlaceCall(
    _ request: Anki_Vector_ExternalInterface_LookAroundInPlaceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_LookAroundInPlaceRequest, Anki_Vector_ExternalInterface_LookAroundInPlaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.lookAroundInPlace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLookAroundInPlaceInterceptors() ?? []
    )
  }

  internal func makeRollBlockCall(
    _ request: Anki_Vector_ExternalInterface_RollBlockRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_RollBlockRequest, Anki_Vector_ExternalInterface_RollBlockResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.rollBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollBlockInterceptors() ?? []
    )
  }

  internal func makePhotosInfoCall(
    _ request: Anki_Vector_ExternalInterface_PhotosInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PhotosInfoRequest, Anki_Vector_ExternalInterface_PhotosInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.photosInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhotosInfoInterceptors() ?? []
    )
  }

  internal func makePhotoCall(
    _ request: Anki_Vector_ExternalInterface_PhotoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PhotoRequest, Anki_Vector_ExternalInterface_PhotoResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.photo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhotoInterceptors() ?? []
    )
  }

  internal func makeThumbnailCall(
    _ request: Anki_Vector_ExternalInterface_ThumbnailRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ThumbnailRequest, Anki_Vector_ExternalInterface_ThumbnailResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.thumbnail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeThumbnailInterceptors() ?? []
    )
  }

  internal func makeDeletePhotoCall(
    _ request: Anki_Vector_ExternalInterface_DeletePhotoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DeletePhotoRequest, Anki_Vector_ExternalInterface_DeletePhotoResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.deletePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeletePhotoInterceptors() ?? []
    )
  }

  internal func makeDriveStraightCall(
    _ request: Anki_Vector_ExternalInterface_DriveStraightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DriveStraightRequest, Anki_Vector_ExternalInterface_DriveStraightResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveStraight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveStraightInterceptors() ?? []
    )
  }

  internal func makeTurnInPlaceCall(
    _ request: Anki_Vector_ExternalInterface_TurnInPlaceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_TurnInPlaceRequest, Anki_Vector_ExternalInterface_TurnInPlaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.turnInPlace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTurnInPlaceInterceptors() ?? []
    )
  }

  internal func makeSetHeadAngleCall(
    _ request: Anki_Vector_ExternalInterface_SetHeadAngleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetHeadAngleRequest, Anki_Vector_ExternalInterface_SetHeadAngleResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setHeadAngle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetHeadAngleInterceptors() ?? []
    )
  }

  internal func makeSetLiftHeightCall(
    _ request: Anki_Vector_ExternalInterface_SetLiftHeightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetLiftHeightRequest, Anki_Vector_ExternalInterface_SetLiftHeightResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setLiftHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLiftHeightInterceptors() ?? []
    )
  }

  internal func makeTurnTowardsFaceCall(
    _ request: Anki_Vector_ExternalInterface_TurnTowardsFaceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_TurnTowardsFaceRequest, Anki_Vector_ExternalInterface_TurnTowardsFaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.turnTowardsFace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTurnTowardsFaceInterceptors() ?? []
    )
  }

  internal func makeGoToObjectCall(
    _ request: Anki_Vector_ExternalInterface_GoToObjectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_GoToObjectRequest, Anki_Vector_ExternalInterface_GoToObjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.goToObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGoToObjectInterceptors() ?? []
    )
  }

  internal func makeRollObjectCall(
    _ request: Anki_Vector_ExternalInterface_RollObjectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_RollObjectRequest, Anki_Vector_ExternalInterface_RollObjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.rollObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollObjectInterceptors() ?? []
    )
  }

  internal func makePopAwheelieCall(
    _ request: Anki_Vector_ExternalInterface_PopAWheelieRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PopAWheelieRequest, Anki_Vector_ExternalInterface_PopAWheelieResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.popAWheelie.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePopAWheelieInterceptors() ?? []
    )
  }

  internal func makePickupObjectCall(
    _ request: Anki_Vector_ExternalInterface_PickupObjectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PickupObjectRequest, Anki_Vector_ExternalInterface_PickupObjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.pickupObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePickupObjectInterceptors() ?? []
    )
  }

  internal func makePlaceObjectOnGroundHereCall(
    _ request: Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest, Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.placeObjectOnGroundHere.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlaceObjectOnGroundHereInterceptors() ?? []
    )
  }

  internal func makeSetMasterVolumeCall(
    _ request: Anki_Vector_ExternalInterface_MasterVolumeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_MasterVolumeRequest, Anki_Vector_ExternalInterface_MasterVolumeResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setMasterVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMasterVolumeInterceptors() ?? []
    )
  }

  internal func makeUserAuthenticationCall(
    _ request: Anki_Vector_ExternalInterface_UserAuthenticationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_UserAuthenticationRequest, Anki_Vector_ExternalInterface_UserAuthenticationResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.userAuthentication.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserAuthenticationInterceptors() ?? []
    )
  }

  internal func makeBatteryStateCall(
    _ request: Anki_Vector_ExternalInterface_BatteryStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_BatteryStateRequest, Anki_Vector_ExternalInterface_BatteryStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.batteryState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatteryStateInterceptors() ?? []
    )
  }

  internal func makeVersionStateCall(
    _ request: Anki_Vector_ExternalInterface_VersionStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_VersionStateRequest, Anki_Vector_ExternalInterface_VersionStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.versionState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVersionStateInterceptors() ?? []
    )
  }

  internal func makeSayTextCall(
    _ request: Anki_Vector_ExternalInterface_SayTextRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SayTextRequest, Anki_Vector_ExternalInterface_SayTextResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.sayText.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayTextInterceptors() ?? []
    )
  }

  internal func makeConnectCubeCall(
    _ request: Anki_Vector_ExternalInterface_ConnectCubeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ConnectCubeRequest, Anki_Vector_ExternalInterface_ConnectCubeResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.connectCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectCubeInterceptors() ?? []
    )
  }

  internal func makeDisconnectCubeCall(
    _ request: Anki_Vector_ExternalInterface_DisconnectCubeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DisconnectCubeRequest, Anki_Vector_ExternalInterface_DisconnectCubeResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.disconnectCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisconnectCubeInterceptors() ?? []
    )
  }

  internal func makeCubesAvailableCall(
    _ request: Anki_Vector_ExternalInterface_CubesAvailableRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CubesAvailableRequest, Anki_Vector_ExternalInterface_CubesAvailableResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cubesAvailable.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCubesAvailableInterceptors() ?? []
    )
  }

  internal func makeFlashCubeLightsCall(
    _ request: Anki_Vector_ExternalInterface_FlashCubeLightsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_FlashCubeLightsRequest, Anki_Vector_ExternalInterface_FlashCubeLightsResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.flashCubeLights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlashCubeLightsInterceptors() ?? []
    )
  }

  internal func makeForgetPreferredCubeCall(
    _ request: Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest, Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.forgetPreferredCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeForgetPreferredCubeInterceptors() ?? []
    )
  }

  internal func makeSetPreferredCubeCall(
    _ request: Anki_Vector_ExternalInterface_SetPreferredCubeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetPreferredCubeRequest, Anki_Vector_ExternalInterface_SetPreferredCubeResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setPreferredCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPreferredCubeInterceptors() ?? []
    )
  }

  internal func makeDeleteCustomObjectsCall(
    _ request: Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest, Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.deleteCustomObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCustomObjectsInterceptors() ?? []
    )
  }

  internal func makeCreateFixedCustomObjectCall(
    _ request: Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest, Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.createFixedCustomObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFixedCustomObjectInterceptors() ?? []
    )
  }

  internal func makeDefineCustomObjectCall(
    _ request: Anki_Vector_ExternalInterface_DefineCustomObjectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_DefineCustomObjectRequest, Anki_Vector_ExternalInterface_DefineCustomObjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.defineCustomObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefineCustomObjectInterceptors() ?? []
    )
  }

  internal func makeSetCubeLightsCall(
    _ request: Anki_Vector_ExternalInterface_SetCubeLightsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetCubeLightsRequest, Anki_Vector_ExternalInterface_SetCubeLightsResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setCubeLights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCubeLightsInterceptors() ?? []
    )
  }

  internal func makeAudioFeedCall(
    _ request: Anki_Vector_ExternalInterface_AudioFeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_AudioFeedRequest, Anki_Vector_ExternalInterface_AudioFeedResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.audioFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAudioFeedInterceptors() ?? []
    )
  }

  internal func makeCameraFeedCall(
    _ request: Anki_Vector_ExternalInterface_CameraFeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_CameraFeedRequest, Anki_Vector_ExternalInterface_CameraFeedResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cameraFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCameraFeedInterceptors() ?? []
    )
  }

  internal func makeCaptureSingleImageCall(
    _ request: Anki_Vector_ExternalInterface_CaptureSingleImageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_CaptureSingleImageRequest, Anki_Vector_ExternalInterface_CaptureSingleImageResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.captureSingleImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCaptureSingleImageInterceptors() ?? []
    )
  }

  internal func makeSetEyeColorCall(
    _ request: Anki_Vector_ExternalInterface_SetEyeColorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Anki_Vector_ExternalInterface_SetEyeColorRequest, Anki_Vector_ExternalInterface_SetEyeColorResponse> {
    return self.makeAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setEyeColor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetEyeColorInterceptors() ?? []
    )
  }

  internal func makeNavMapFeedCall(
    _ request: Anki_Vector_ExternalInterface_NavMapFeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Anki_Vector_ExternalInterface_NavMapFeedRequest, Anki_Vector_ExternalInterface_NavMapFeedResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.navMapFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNavMapFeedInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Anki_Vector_ExternalInterface_ExternalInterfaceAsyncClientProtocol {
  internal func protocolVersion(
    _ request: Anki_Vector_ExternalInterface_ProtocolVersionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_ProtocolVersionResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.protocolVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProtocolVersionInterceptors() ?? []
    )
  }

  internal func sDKInitialization(
    _ request: Anki_Vector_ExternalInterface_SDKInitializationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_SDKInitializationResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.sDKInitialization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSDKInitializationInterceptors() ?? []
    )
  }

  internal func driveWheels(
    _ request: Anki_Vector_ExternalInterface_DriveWheelsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DriveWheelsResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveWheels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveWheelsInterceptors() ?? []
    )
  }

  internal func playAnimationTrigger(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_PlayAnimationResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.playAnimationTrigger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlayAnimationTriggerInterceptors() ?? []
    )
  }

  internal func playAnimation(
    _ request: Anki_Vector_ExternalInterface_PlayAnimationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_PlayAnimationResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.playAnimation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlayAnimationInterceptors() ?? []
    )
  }

  internal func listAnimations(
    _ request: Anki_Vector_ExternalInterface_ListAnimationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_ListAnimationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.listAnimations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAnimationsInterceptors() ?? []
    )
  }

  internal func listAnimationTriggers(
    _ request: Anki_Vector_ExternalInterface_ListAnimationTriggersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_ListAnimationTriggersResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.listAnimationTriggers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAnimationTriggersInterceptors() ?? []
    )
  }

  internal func moveHead(
    _ request: Anki_Vector_ExternalInterface_MoveHeadRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_MoveHeadResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.moveHead.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveHeadInterceptors() ?? []
    )
  }

  internal func moveLift(
    _ request: Anki_Vector_ExternalInterface_MoveLiftRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_MoveLiftResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.moveLift.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveLiftInterceptors() ?? []
    )
  }

  internal func stopAllMotors(
    _ request: Anki_Vector_ExternalInterface_StopAllMotorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_StopAllMotorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.stopAllMotors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopAllMotorsInterceptors() ?? []
    )
  }

  internal func displayFaceImageRGB(
    _ request: Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.displayFaceImageRGB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisplayFaceImageRGBInterceptors() ?? []
    )
  }

  internal func eventStream(
    _ request: Anki_Vector_ExternalInterface_EventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_EventResponse> {
    return self.performAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eventStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventStreamInterceptors() ?? []
    )
  }

  internal func externalAudioStreamPlayback<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_ExternalAudioStreamResponse> where RequestStream: Sequence, RequestStream.Element == Anki_Vector_ExternalInterface_ExternalAudioStreamRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.externalAudioStreamPlayback.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExternalAudioStreamPlaybackInterceptors() ?? []
    )
  }

  internal func externalAudioStreamPlayback<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_ExternalAudioStreamResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Anki_Vector_ExternalInterface_ExternalAudioStreamRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.externalAudioStreamPlayback.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExternalAudioStreamPlaybackInterceptors() ?? []
    )
  }

  internal func behaviorControl<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_BehaviorControlResponse> where RequestStream: Sequence, RequestStream.Element == Anki_Vector_ExternalInterface_BehaviorControlRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.behaviorControl.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBehaviorControlInterceptors() ?? []
    )
  }

  internal func behaviorControl<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_BehaviorControlResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Anki_Vector_ExternalInterface_BehaviorControlRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.behaviorControl.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBehaviorControlInterceptors() ?? []
    )
  }

  internal func assumeBehaviorControl(
    _ request: Anki_Vector_ExternalInterface_BehaviorControlRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_BehaviorControlResponse> {
    return self.performAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.assumeBehaviorControl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssumeBehaviorControlInterceptors() ?? []
    )
  }

  internal func cancelFaceEnrollment(
    _ request: Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cancelFaceEnrollment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelFaceEnrollmentInterceptors() ?? []
    )
  }

  internal func requestEnrolledNames(
    _ request: Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.requestEnrolledNames.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestEnrolledNamesInterceptors() ?? []
    )
  }

  internal func updateEnrolledFaceByID(
    _ request: Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.updateEnrolledFaceByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrolledFaceByIDInterceptors() ?? []
    )
  }

  internal func eraseEnrolledFaceByID(
    _ request: Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eraseEnrolledFaceByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEraseEnrolledFaceByIDInterceptors() ?? []
    )
  }

  internal func eraseAllEnrolledFaces(
    _ request: Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eraseAllEnrolledFaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEraseAllEnrolledFacesInterceptors() ?? []
    )
  }

  internal func setFaceToEnroll(
    _ request: Anki_Vector_ExternalInterface_SetFaceToEnrollRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_SetFaceToEnrollResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setFaceToEnroll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetFaceToEnrollInterceptors() ?? []
    )
  }

  internal func enableMarkerDetection(
    _ request: Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMarkerDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMarkerDetectionInterceptors() ?? []
    )
  }

  internal func enableFaceDetection(
    _ request: Anki_Vector_ExternalInterface_EnableFaceDetectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_EnableFaceDetectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableFaceDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableFaceDetectionInterceptors() ?? []
    )
  }

  internal func enableMotionDetection(
    _ request: Anki_Vector_ExternalInterface_EnableMotionDetectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_EnableMotionDetectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMotionDetection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMotionDetectionInterceptors() ?? []
    )
  }

  internal func enableMirrorMode(
    _ request: Anki_Vector_ExternalInterface_EnableMirrorModeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_EnableMirrorModeResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMirrorMode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableMirrorModeInterceptors() ?? []
    )
  }

  internal func enableImageStreaming(
    _ request: Anki_Vector_ExternalInterface_EnableImageStreamingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_EnableImageStreamingResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableImageStreaming.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableImageStreamingInterceptors() ?? []
    )
  }

  internal func isImageStreamingEnabled(
    _ request: Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.isImageStreamingEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsImageStreamingEnabledInterceptors() ?? []
    )
  }

  internal func cancelActionByIdTag(
    _ request: Anki_Vector_ExternalInterface_CancelActionByIdTagRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_CancelActionByIdTagResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cancelActionByIdTag.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelActionByIdTagInterceptors() ?? []
    )
  }

  internal func goToPose(
    _ request: Anki_Vector_ExternalInterface_GoToPoseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_GoToPoseResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.goToPose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGoToPoseInterceptors() ?? []
    )
  }

  internal func dockWithCube(
    _ request: Anki_Vector_ExternalInterface_DockWithCubeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DockWithCubeResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.dockWithCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDockWithCubeInterceptors() ?? []
    )
  }

  internal func driveOffCharger(
    _ request: Anki_Vector_ExternalInterface_DriveOffChargerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DriveOffChargerResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveOffCharger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveOffChargerInterceptors() ?? []
    )
  }

  internal func driveOnCharger(
    _ request: Anki_Vector_ExternalInterface_DriveOnChargerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DriveOnChargerResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveOnCharger.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveOnChargerInterceptors() ?? []
    )
  }

  internal func findFaces(
    _ request: Anki_Vector_ExternalInterface_FindFacesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_FindFacesResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.findFaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindFacesInterceptors() ?? []
    )
  }

  internal func lookAroundInPlace(
    _ request: Anki_Vector_ExternalInterface_LookAroundInPlaceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_LookAroundInPlaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.lookAroundInPlace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLookAroundInPlaceInterceptors() ?? []
    )
  }

  internal func rollBlock(
    _ request: Anki_Vector_ExternalInterface_RollBlockRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_RollBlockResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.rollBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollBlockInterceptors() ?? []
    )
  }

  internal func photosInfo(
    _ request: Anki_Vector_ExternalInterface_PhotosInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_PhotosInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.photosInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhotosInfoInterceptors() ?? []
    )
  }

  internal func photo(
    _ request: Anki_Vector_ExternalInterface_PhotoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_PhotoResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.photo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePhotoInterceptors() ?? []
    )
  }

  internal func thumbnail(
    _ request: Anki_Vector_ExternalInterface_ThumbnailRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_ThumbnailResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.thumbnail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeThumbnailInterceptors() ?? []
    )
  }

  internal func deletePhoto(
    _ request: Anki_Vector_ExternalInterface_DeletePhotoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DeletePhotoResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.deletePhoto.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeletePhotoInterceptors() ?? []
    )
  }

  internal func driveStraight(
    _ request: Anki_Vector_ExternalInterface_DriveStraightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DriveStraightResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveStraight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDriveStraightInterceptors() ?? []
    )
  }

  internal func turnInPlace(
    _ request: Anki_Vector_ExternalInterface_TurnInPlaceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_TurnInPlaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.turnInPlace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTurnInPlaceInterceptors() ?? []
    )
  }

  internal func setHeadAngle(
    _ request: Anki_Vector_ExternalInterface_SetHeadAngleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_SetHeadAngleResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setHeadAngle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetHeadAngleInterceptors() ?? []
    )
  }

  internal func setLiftHeight(
    _ request: Anki_Vector_ExternalInterface_SetLiftHeightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_SetLiftHeightResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setLiftHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLiftHeightInterceptors() ?? []
    )
  }

  internal func turnTowardsFace(
    _ request: Anki_Vector_ExternalInterface_TurnTowardsFaceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_TurnTowardsFaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.turnTowardsFace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTurnTowardsFaceInterceptors() ?? []
    )
  }

  internal func goToObject(
    _ request: Anki_Vector_ExternalInterface_GoToObjectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_GoToObjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.goToObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGoToObjectInterceptors() ?? []
    )
  }

  internal func rollObject(
    _ request: Anki_Vector_ExternalInterface_RollObjectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_RollObjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.rollObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollObjectInterceptors() ?? []
    )
  }

  internal func popAWheelie(
    _ request: Anki_Vector_ExternalInterface_PopAWheelieRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_PopAWheelieResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.popAWheelie.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePopAWheelieInterceptors() ?? []
    )
  }

  internal func pickupObject(
    _ request: Anki_Vector_ExternalInterface_PickupObjectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_PickupObjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.pickupObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePickupObjectInterceptors() ?? []
    )
  }

  internal func placeObjectOnGroundHere(
    _ request: Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.placeObjectOnGroundHere.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlaceObjectOnGroundHereInterceptors() ?? []
    )
  }

  internal func setMasterVolume(
    _ request: Anki_Vector_ExternalInterface_MasterVolumeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_MasterVolumeResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setMasterVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMasterVolumeInterceptors() ?? []
    )
  }

  internal func userAuthentication(
    _ request: Anki_Vector_ExternalInterface_UserAuthenticationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_UserAuthenticationResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.userAuthentication.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserAuthenticationInterceptors() ?? []
    )
  }

  internal func batteryState(
    _ request: Anki_Vector_ExternalInterface_BatteryStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_BatteryStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.batteryState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatteryStateInterceptors() ?? []
    )
  }

  internal func versionState(
    _ request: Anki_Vector_ExternalInterface_VersionStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_VersionStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.versionState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVersionStateInterceptors() ?? []
    )
  }

  internal func sayText(
    _ request: Anki_Vector_ExternalInterface_SayTextRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_SayTextResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.sayText.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayTextInterceptors() ?? []
    )
  }

  internal func connectCube(
    _ request: Anki_Vector_ExternalInterface_ConnectCubeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_ConnectCubeResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.connectCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectCubeInterceptors() ?? []
    )
  }

  internal func disconnectCube(
    _ request: Anki_Vector_ExternalInterface_DisconnectCubeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DisconnectCubeResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.disconnectCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisconnectCubeInterceptors() ?? []
    )
  }

  internal func cubesAvailable(
    _ request: Anki_Vector_ExternalInterface_CubesAvailableRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_CubesAvailableResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cubesAvailable.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCubesAvailableInterceptors() ?? []
    )
  }

  internal func flashCubeLights(
    _ request: Anki_Vector_ExternalInterface_FlashCubeLightsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_FlashCubeLightsResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.flashCubeLights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlashCubeLightsInterceptors() ?? []
    )
  }

  internal func forgetPreferredCube(
    _ request: Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.forgetPreferredCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeForgetPreferredCubeInterceptors() ?? []
    )
  }

  internal func setPreferredCube(
    _ request: Anki_Vector_ExternalInterface_SetPreferredCubeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_SetPreferredCubeResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setPreferredCube.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPreferredCubeInterceptors() ?? []
    )
  }

  internal func deleteCustomObjects(
    _ request: Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.deleteCustomObjects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCustomObjectsInterceptors() ?? []
    )
  }

  internal func createFixedCustomObject(
    _ request: Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.createFixedCustomObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFixedCustomObjectInterceptors() ?? []
    )
  }

  internal func defineCustomObject(
    _ request: Anki_Vector_ExternalInterface_DefineCustomObjectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_DefineCustomObjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.defineCustomObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefineCustomObjectInterceptors() ?? []
    )
  }

  internal func setCubeLights(
    _ request: Anki_Vector_ExternalInterface_SetCubeLightsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_SetCubeLightsResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setCubeLights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCubeLightsInterceptors() ?? []
    )
  }

  internal func audioFeed(
    _ request: Anki_Vector_ExternalInterface_AudioFeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_AudioFeedResponse> {
    return self.performAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.audioFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAudioFeedInterceptors() ?? []
    )
  }

  internal func cameraFeed(
    _ request: Anki_Vector_ExternalInterface_CameraFeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_CameraFeedResponse> {
    return self.performAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cameraFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCameraFeedInterceptors() ?? []
    )
  }

  internal func captureSingleImage(
    _ request: Anki_Vector_ExternalInterface_CaptureSingleImageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_CaptureSingleImageResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.captureSingleImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCaptureSingleImageInterceptors() ?? []
    )
  }

  internal func setEyeColor(
    _ request: Anki_Vector_ExternalInterface_SetEyeColorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Anki_Vector_ExternalInterface_SetEyeColorResponse {
    return try await self.performAsyncUnaryCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setEyeColor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetEyeColorInterceptors() ?? []
    )
  }

  internal func navMapFeed(
    _ request: Anki_Vector_ExternalInterface_NavMapFeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Anki_Vector_ExternalInterface_NavMapFeedResponse> {
    return self.performAsyncServerStreamingCall(
      path: Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.navMapFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNavMapFeedInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Anki_Vector_ExternalInterface_ExternalInterfaceAsyncClient: Anki_Vector_ExternalInterface_ExternalInterfaceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Anki_Vector_ExternalInterface_ExternalInterfaceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'protocolVersion'.
  func makeProtocolVersionInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_ProtocolVersionRequest, Anki_Vector_ExternalInterface_ProtocolVersionResponse>]

  /// - Returns: Interceptors to use when invoking 'sDKInitialization'.
  func makeSDKInitializationInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_SDKInitializationRequest, Anki_Vector_ExternalInterface_SDKInitializationResponse>]

  /// - Returns: Interceptors to use when invoking 'driveWheels'.
  func makeDriveWheelsInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DriveWheelsRequest, Anki_Vector_ExternalInterface_DriveWheelsResponse>]

  /// - Returns: Interceptors to use when invoking 'playAnimationTrigger'.
  func makePlayAnimationTriggerInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse>]

  /// - Returns: Interceptors to use when invoking 'playAnimation'.
  func makePlayAnimationInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_PlayAnimationRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse>]

  /// - Returns: Interceptors to use when invoking 'listAnimations'.
  func makeListAnimationsInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_ListAnimationsRequest, Anki_Vector_ExternalInterface_ListAnimationsResponse>]

  /// - Returns: Interceptors to use when invoking 'listAnimationTriggers'.
  func makeListAnimationTriggersInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_ListAnimationTriggersRequest, Anki_Vector_ExternalInterface_ListAnimationTriggersResponse>]

  /// - Returns: Interceptors to use when invoking 'moveHead'.
  func makeMoveHeadInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_MoveHeadRequest, Anki_Vector_ExternalInterface_MoveHeadResponse>]

  /// - Returns: Interceptors to use when invoking 'moveLift'.
  func makeMoveLiftInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_MoveLiftRequest, Anki_Vector_ExternalInterface_MoveLiftResponse>]

  /// - Returns: Interceptors to use when invoking 'stopAllMotors'.
  func makeStopAllMotorsInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_StopAllMotorsRequest, Anki_Vector_ExternalInterface_StopAllMotorsResponse>]

  /// - Returns: Interceptors to use when invoking 'displayFaceImageRGB'.
  func makeDisplayFaceImageRGBInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest, Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse>]

  /// - Returns: Interceptors to use when invoking 'eventStream'.
  func makeEventStreamInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_EventRequest, Anki_Vector_ExternalInterface_EventResponse>]

  /// - Returns: Interceptors to use when invoking 'externalAudioStreamPlayback'.
  func makeExternalAudioStreamPlaybackInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest, Anki_Vector_ExternalInterface_ExternalAudioStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'behaviorControl'.
  func makeBehaviorControlInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse>]

  /// - Returns: Interceptors to use when invoking 'assumeBehaviorControl'.
  func makeAssumeBehaviorControlInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelFaceEnrollment'.
  func makeCancelFaceEnrollmentInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest, Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse>]

  /// - Returns: Interceptors to use when invoking 'requestEnrolledNames'.
  func makeRequestEnrolledNamesInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest, Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse>]

  /// - Returns: Interceptors to use when invoking 'updateEnrolledFaceByID'.
  func makeUpdateEnrolledFaceByIDInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'eraseEnrolledFaceByID'.
  func makeEraseEnrolledFaceByIDInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'eraseAllEnrolledFaces'.
  func makeEraseAllEnrolledFacesInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest, Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse>]

  /// - Returns: Interceptors to use when invoking 'setFaceToEnroll'.
  func makeSetFaceToEnrollInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_SetFaceToEnrollRequest, Anki_Vector_ExternalInterface_SetFaceToEnrollResponse>]

  /// - Returns: Interceptors to use when invoking 'enableMarkerDetection'.
  func makeEnableMarkerDetectionInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest, Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse>]

  /// - Returns: Interceptors to use when invoking 'enableFaceDetection'.
  func makeEnableFaceDetectionInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_EnableFaceDetectionRequest, Anki_Vector_ExternalInterface_EnableFaceDetectionResponse>]

  /// - Returns: Interceptors to use when invoking 'enableMotionDetection'.
  func makeEnableMotionDetectionInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_EnableMotionDetectionRequest, Anki_Vector_ExternalInterface_EnableMotionDetectionResponse>]

  /// - Returns: Interceptors to use when invoking 'enableMirrorMode'.
  func makeEnableMirrorModeInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_EnableMirrorModeRequest, Anki_Vector_ExternalInterface_EnableMirrorModeResponse>]

  /// - Returns: Interceptors to use when invoking 'enableImageStreaming'.
  func makeEnableImageStreamingInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_EnableImageStreamingRequest, Anki_Vector_ExternalInterface_EnableImageStreamingResponse>]

  /// - Returns: Interceptors to use when invoking 'isImageStreamingEnabled'.
  func makeIsImageStreamingEnabledInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest, Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelActionByIdTag'.
  func makeCancelActionByIdTagInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_CancelActionByIdTagRequest, Anki_Vector_ExternalInterface_CancelActionByIdTagResponse>]

  /// - Returns: Interceptors to use when invoking 'goToPose'.
  func makeGoToPoseInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_GoToPoseRequest, Anki_Vector_ExternalInterface_GoToPoseResponse>]

  /// - Returns: Interceptors to use when invoking 'dockWithCube'.
  func makeDockWithCubeInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DockWithCubeRequest, Anki_Vector_ExternalInterface_DockWithCubeResponse>]

  /// - Returns: Interceptors to use when invoking 'driveOffCharger'.
  func makeDriveOffChargerInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DriveOffChargerRequest, Anki_Vector_ExternalInterface_DriveOffChargerResponse>]

  /// - Returns: Interceptors to use when invoking 'driveOnCharger'.
  func makeDriveOnChargerInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DriveOnChargerRequest, Anki_Vector_ExternalInterface_DriveOnChargerResponse>]

  /// - Returns: Interceptors to use when invoking 'findFaces'.
  func makeFindFacesInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_FindFacesRequest, Anki_Vector_ExternalInterface_FindFacesResponse>]

  /// - Returns: Interceptors to use when invoking 'lookAroundInPlace'.
  func makeLookAroundInPlaceInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_LookAroundInPlaceRequest, Anki_Vector_ExternalInterface_LookAroundInPlaceResponse>]

  /// - Returns: Interceptors to use when invoking 'rollBlock'.
  func makeRollBlockInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_RollBlockRequest, Anki_Vector_ExternalInterface_RollBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'photosInfo'.
  func makePhotosInfoInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_PhotosInfoRequest, Anki_Vector_ExternalInterface_PhotosInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'photo'.
  func makePhotoInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_PhotoRequest, Anki_Vector_ExternalInterface_PhotoResponse>]

  /// - Returns: Interceptors to use when invoking 'thumbnail'.
  func makeThumbnailInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_ThumbnailRequest, Anki_Vector_ExternalInterface_ThumbnailResponse>]

  /// - Returns: Interceptors to use when invoking 'deletePhoto'.
  func makeDeletePhotoInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DeletePhotoRequest, Anki_Vector_ExternalInterface_DeletePhotoResponse>]

  /// - Returns: Interceptors to use when invoking 'driveStraight'.
  func makeDriveStraightInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DriveStraightRequest, Anki_Vector_ExternalInterface_DriveStraightResponse>]

  /// - Returns: Interceptors to use when invoking 'turnInPlace'.
  func makeTurnInPlaceInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_TurnInPlaceRequest, Anki_Vector_ExternalInterface_TurnInPlaceResponse>]

  /// - Returns: Interceptors to use when invoking 'setHeadAngle'.
  func makeSetHeadAngleInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_SetHeadAngleRequest, Anki_Vector_ExternalInterface_SetHeadAngleResponse>]

  /// - Returns: Interceptors to use when invoking 'setLiftHeight'.
  func makeSetLiftHeightInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_SetLiftHeightRequest, Anki_Vector_ExternalInterface_SetLiftHeightResponse>]

  /// - Returns: Interceptors to use when invoking 'turnTowardsFace'.
  func makeTurnTowardsFaceInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_TurnTowardsFaceRequest, Anki_Vector_ExternalInterface_TurnTowardsFaceResponse>]

  /// - Returns: Interceptors to use when invoking 'goToObject'.
  func makeGoToObjectInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_GoToObjectRequest, Anki_Vector_ExternalInterface_GoToObjectResponse>]

  /// - Returns: Interceptors to use when invoking 'rollObject'.
  func makeRollObjectInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_RollObjectRequest, Anki_Vector_ExternalInterface_RollObjectResponse>]

  /// - Returns: Interceptors to use when invoking 'popAWheelie'.
  func makePopAWheelieInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_PopAWheelieRequest, Anki_Vector_ExternalInterface_PopAWheelieResponse>]

  /// - Returns: Interceptors to use when invoking 'pickupObject'.
  func makePickupObjectInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_PickupObjectRequest, Anki_Vector_ExternalInterface_PickupObjectResponse>]

  /// - Returns: Interceptors to use when invoking 'placeObjectOnGroundHere'.
  func makePlaceObjectOnGroundHereInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest, Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse>]

  /// - Returns: Interceptors to use when invoking 'setMasterVolume'.
  func makeSetMasterVolumeInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_MasterVolumeRequest, Anki_Vector_ExternalInterface_MasterVolumeResponse>]

  /// - Returns: Interceptors to use when invoking 'userAuthentication'.
  func makeUserAuthenticationInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_UserAuthenticationRequest, Anki_Vector_ExternalInterface_UserAuthenticationResponse>]

  /// - Returns: Interceptors to use when invoking 'batteryState'.
  func makeBatteryStateInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_BatteryStateRequest, Anki_Vector_ExternalInterface_BatteryStateResponse>]

  /// - Returns: Interceptors to use when invoking 'versionState'.
  func makeVersionStateInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_VersionStateRequest, Anki_Vector_ExternalInterface_VersionStateResponse>]

  /// - Returns: Interceptors to use when invoking 'sayText'.
  func makeSayTextInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_SayTextRequest, Anki_Vector_ExternalInterface_SayTextResponse>]

  /// - Returns: Interceptors to use when invoking 'connectCube'.
  func makeConnectCubeInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_ConnectCubeRequest, Anki_Vector_ExternalInterface_ConnectCubeResponse>]

  /// - Returns: Interceptors to use when invoking 'disconnectCube'.
  func makeDisconnectCubeInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DisconnectCubeRequest, Anki_Vector_ExternalInterface_DisconnectCubeResponse>]

  /// - Returns: Interceptors to use when invoking 'cubesAvailable'.
  func makeCubesAvailableInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_CubesAvailableRequest, Anki_Vector_ExternalInterface_CubesAvailableResponse>]

  /// - Returns: Interceptors to use when invoking 'flashCubeLights'.
  func makeFlashCubeLightsInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_FlashCubeLightsRequest, Anki_Vector_ExternalInterface_FlashCubeLightsResponse>]

  /// - Returns: Interceptors to use when invoking 'forgetPreferredCube'.
  func makeForgetPreferredCubeInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest, Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse>]

  /// - Returns: Interceptors to use when invoking 'setPreferredCube'.
  func makeSetPreferredCubeInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_SetPreferredCubeRequest, Anki_Vector_ExternalInterface_SetPreferredCubeResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteCustomObjects'.
  func makeDeleteCustomObjectsInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest, Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse>]

  /// - Returns: Interceptors to use when invoking 'createFixedCustomObject'.
  func makeCreateFixedCustomObjectInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest, Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse>]

  /// - Returns: Interceptors to use when invoking 'defineCustomObject'.
  func makeDefineCustomObjectInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_DefineCustomObjectRequest, Anki_Vector_ExternalInterface_DefineCustomObjectResponse>]

  /// - Returns: Interceptors to use when invoking 'setCubeLights'.
  func makeSetCubeLightsInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_SetCubeLightsRequest, Anki_Vector_ExternalInterface_SetCubeLightsResponse>]

  /// - Returns: Interceptors to use when invoking 'audioFeed'.
  func makeAudioFeedInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_AudioFeedRequest, Anki_Vector_ExternalInterface_AudioFeedResponse>]

  /// - Returns: Interceptors to use when invoking 'cameraFeed'.
  func makeCameraFeedInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_CameraFeedRequest, Anki_Vector_ExternalInterface_CameraFeedResponse>]

  /// - Returns: Interceptors to use when invoking 'captureSingleImage'.
  func makeCaptureSingleImageInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_CaptureSingleImageRequest, Anki_Vector_ExternalInterface_CaptureSingleImageResponse>]

  /// - Returns: Interceptors to use when invoking 'setEyeColor'.
  func makeSetEyeColorInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_SetEyeColorRequest, Anki_Vector_ExternalInterface_SetEyeColorResponse>]

  /// - Returns: Interceptors to use when invoking 'navMapFeed'.
  func makeNavMapFeedInterceptors() -> [ClientInterceptor<Anki_Vector_ExternalInterface_NavMapFeedRequest, Anki_Vector_ExternalInterface_NavMapFeedResponse>]
}

internal enum Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ExternalInterface",
    fullName: "Anki.Vector.external_interface.ExternalInterface",
    methods: [
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.protocolVersion,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.sDKInitialization,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveWheels,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.playAnimationTrigger,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.playAnimation,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.listAnimations,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.listAnimationTriggers,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.moveHead,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.moveLift,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.stopAllMotors,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.displayFaceImageRGB,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eventStream,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.externalAudioStreamPlayback,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.behaviorControl,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.assumeBehaviorControl,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cancelFaceEnrollment,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.requestEnrolledNames,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.updateEnrolledFaceByID,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eraseEnrolledFaceByID,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.eraseAllEnrolledFaces,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setFaceToEnroll,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMarkerDetection,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableFaceDetection,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMotionDetection,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableMirrorMode,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.enableImageStreaming,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.isImageStreamingEnabled,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cancelActionByIdTag,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.goToPose,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.dockWithCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveOffCharger,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveOnCharger,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.findFaces,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.lookAroundInPlace,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.rollBlock,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.photosInfo,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.photo,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.thumbnail,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.deletePhoto,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.driveStraight,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.turnInPlace,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setHeadAngle,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setLiftHeight,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.turnTowardsFace,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.goToObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.rollObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.popAWheelie,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.pickupObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.placeObjectOnGroundHere,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setMasterVolume,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.userAuthentication,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.batteryState,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.versionState,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.sayText,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.connectCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.disconnectCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cubesAvailable,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.flashCubeLights,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.forgetPreferredCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setPreferredCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.deleteCustomObjects,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.createFixedCustomObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.defineCustomObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setCubeLights,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.audioFeed,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.cameraFeed,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.captureSingleImage,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.setEyeColor,
      Anki_Vector_ExternalInterface_ExternalInterfaceClientMetadata.Methods.navMapFeed,
    ]
  )

  internal enum Methods {
    internal static let protocolVersion = GRPCMethodDescriptor(
      name: "ProtocolVersion",
      path: "/Anki.Vector.external_interface.ExternalInterface/ProtocolVersion",
      type: GRPCCallType.unary
    )

    internal static let sDKInitialization = GRPCMethodDescriptor(
      name: "SDKInitialization",
      path: "/Anki.Vector.external_interface.ExternalInterface/SDKInitialization",
      type: GRPCCallType.unary
    )

    internal static let driveWheels = GRPCMethodDescriptor(
      name: "DriveWheels",
      path: "/Anki.Vector.external_interface.ExternalInterface/DriveWheels",
      type: GRPCCallType.unary
    )

    internal static let playAnimationTrigger = GRPCMethodDescriptor(
      name: "PlayAnimationTrigger",
      path: "/Anki.Vector.external_interface.ExternalInterface/PlayAnimationTrigger",
      type: GRPCCallType.unary
    )

    internal static let playAnimation = GRPCMethodDescriptor(
      name: "PlayAnimation",
      path: "/Anki.Vector.external_interface.ExternalInterface/PlayAnimation",
      type: GRPCCallType.unary
    )

    internal static let listAnimations = GRPCMethodDescriptor(
      name: "ListAnimations",
      path: "/Anki.Vector.external_interface.ExternalInterface/ListAnimations",
      type: GRPCCallType.unary
    )

    internal static let listAnimationTriggers = GRPCMethodDescriptor(
      name: "ListAnimationTriggers",
      path: "/Anki.Vector.external_interface.ExternalInterface/ListAnimationTriggers",
      type: GRPCCallType.unary
    )

    internal static let moveHead = GRPCMethodDescriptor(
      name: "MoveHead",
      path: "/Anki.Vector.external_interface.ExternalInterface/MoveHead",
      type: GRPCCallType.unary
    )

    internal static let moveLift = GRPCMethodDescriptor(
      name: "MoveLift",
      path: "/Anki.Vector.external_interface.ExternalInterface/MoveLift",
      type: GRPCCallType.unary
    )

    internal static let stopAllMotors = GRPCMethodDescriptor(
      name: "StopAllMotors",
      path: "/Anki.Vector.external_interface.ExternalInterface/StopAllMotors",
      type: GRPCCallType.unary
    )

    internal static let displayFaceImageRGB = GRPCMethodDescriptor(
      name: "DisplayFaceImageRGB",
      path: "/Anki.Vector.external_interface.ExternalInterface/DisplayFaceImageRGB",
      type: GRPCCallType.unary
    )

    internal static let eventStream = GRPCMethodDescriptor(
      name: "EventStream",
      path: "/Anki.Vector.external_interface.ExternalInterface/EventStream",
      type: GRPCCallType.serverStreaming
    )

    internal static let externalAudioStreamPlayback = GRPCMethodDescriptor(
      name: "ExternalAudioStreamPlayback",
      path: "/Anki.Vector.external_interface.ExternalInterface/ExternalAudioStreamPlayback",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let behaviorControl = GRPCMethodDescriptor(
      name: "BehaviorControl",
      path: "/Anki.Vector.external_interface.ExternalInterface/BehaviorControl",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let assumeBehaviorControl = GRPCMethodDescriptor(
      name: "AssumeBehaviorControl",
      path: "/Anki.Vector.external_interface.ExternalInterface/AssumeBehaviorControl",
      type: GRPCCallType.serverStreaming
    )

    internal static let cancelFaceEnrollment = GRPCMethodDescriptor(
      name: "CancelFaceEnrollment",
      path: "/Anki.Vector.external_interface.ExternalInterface/CancelFaceEnrollment",
      type: GRPCCallType.unary
    )

    internal static let requestEnrolledNames = GRPCMethodDescriptor(
      name: "RequestEnrolledNames",
      path: "/Anki.Vector.external_interface.ExternalInterface/RequestEnrolledNames",
      type: GRPCCallType.unary
    )

    internal static let updateEnrolledFaceByID = GRPCMethodDescriptor(
      name: "UpdateEnrolledFaceByID",
      path: "/Anki.Vector.external_interface.ExternalInterface/UpdateEnrolledFaceByID",
      type: GRPCCallType.unary
    )

    internal static let eraseEnrolledFaceByID = GRPCMethodDescriptor(
      name: "EraseEnrolledFaceByID",
      path: "/Anki.Vector.external_interface.ExternalInterface/EraseEnrolledFaceByID",
      type: GRPCCallType.unary
    )

    internal static let eraseAllEnrolledFaces = GRPCMethodDescriptor(
      name: "EraseAllEnrolledFaces",
      path: "/Anki.Vector.external_interface.ExternalInterface/EraseAllEnrolledFaces",
      type: GRPCCallType.unary
    )

    internal static let setFaceToEnroll = GRPCMethodDescriptor(
      name: "SetFaceToEnroll",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetFaceToEnroll",
      type: GRPCCallType.unary
    )

    internal static let enableMarkerDetection = GRPCMethodDescriptor(
      name: "EnableMarkerDetection",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableMarkerDetection",
      type: GRPCCallType.unary
    )

    internal static let enableFaceDetection = GRPCMethodDescriptor(
      name: "EnableFaceDetection",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableFaceDetection",
      type: GRPCCallType.unary
    )

    internal static let enableMotionDetection = GRPCMethodDescriptor(
      name: "EnableMotionDetection",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableMotionDetection",
      type: GRPCCallType.unary
    )

    internal static let enableMirrorMode = GRPCMethodDescriptor(
      name: "EnableMirrorMode",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableMirrorMode",
      type: GRPCCallType.unary
    )

    internal static let enableImageStreaming = GRPCMethodDescriptor(
      name: "EnableImageStreaming",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableImageStreaming",
      type: GRPCCallType.unary
    )

    internal static let isImageStreamingEnabled = GRPCMethodDescriptor(
      name: "IsImageStreamingEnabled",
      path: "/Anki.Vector.external_interface.ExternalInterface/IsImageStreamingEnabled",
      type: GRPCCallType.unary
    )

    internal static let cancelActionByIdTag = GRPCMethodDescriptor(
      name: "CancelActionByIdTag",
      path: "/Anki.Vector.external_interface.ExternalInterface/CancelActionByIdTag",
      type: GRPCCallType.unary
    )

    internal static let goToPose = GRPCMethodDescriptor(
      name: "GoToPose",
      path: "/Anki.Vector.external_interface.ExternalInterface/GoToPose",
      type: GRPCCallType.unary
    )

    internal static let dockWithCube = GRPCMethodDescriptor(
      name: "DockWithCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/DockWithCube",
      type: GRPCCallType.unary
    )

    internal static let driveOffCharger = GRPCMethodDescriptor(
      name: "DriveOffCharger",
      path: "/Anki.Vector.external_interface.ExternalInterface/DriveOffCharger",
      type: GRPCCallType.unary
    )

    internal static let driveOnCharger = GRPCMethodDescriptor(
      name: "DriveOnCharger",
      path: "/Anki.Vector.external_interface.ExternalInterface/DriveOnCharger",
      type: GRPCCallType.unary
    )

    internal static let findFaces = GRPCMethodDescriptor(
      name: "FindFaces",
      path: "/Anki.Vector.external_interface.ExternalInterface/FindFaces",
      type: GRPCCallType.unary
    )

    internal static let lookAroundInPlace = GRPCMethodDescriptor(
      name: "LookAroundInPlace",
      path: "/Anki.Vector.external_interface.ExternalInterface/LookAroundInPlace",
      type: GRPCCallType.unary
    )

    internal static let rollBlock = GRPCMethodDescriptor(
      name: "RollBlock",
      path: "/Anki.Vector.external_interface.ExternalInterface/RollBlock",
      type: GRPCCallType.unary
    )

    internal static let photosInfo = GRPCMethodDescriptor(
      name: "PhotosInfo",
      path: "/Anki.Vector.external_interface.ExternalInterface/PhotosInfo",
      type: GRPCCallType.unary
    )

    internal static let photo = GRPCMethodDescriptor(
      name: "Photo",
      path: "/Anki.Vector.external_interface.ExternalInterface/Photo",
      type: GRPCCallType.unary
    )

    internal static let thumbnail = GRPCMethodDescriptor(
      name: "Thumbnail",
      path: "/Anki.Vector.external_interface.ExternalInterface/Thumbnail",
      type: GRPCCallType.unary
    )

    internal static let deletePhoto = GRPCMethodDescriptor(
      name: "DeletePhoto",
      path: "/Anki.Vector.external_interface.ExternalInterface/DeletePhoto",
      type: GRPCCallType.unary
    )

    internal static let driveStraight = GRPCMethodDescriptor(
      name: "DriveStraight",
      path: "/Anki.Vector.external_interface.ExternalInterface/DriveStraight",
      type: GRPCCallType.unary
    )

    internal static let turnInPlace = GRPCMethodDescriptor(
      name: "TurnInPlace",
      path: "/Anki.Vector.external_interface.ExternalInterface/TurnInPlace",
      type: GRPCCallType.unary
    )

    internal static let setHeadAngle = GRPCMethodDescriptor(
      name: "SetHeadAngle",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetHeadAngle",
      type: GRPCCallType.unary
    )

    internal static let setLiftHeight = GRPCMethodDescriptor(
      name: "SetLiftHeight",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetLiftHeight",
      type: GRPCCallType.unary
    )

    internal static let turnTowardsFace = GRPCMethodDescriptor(
      name: "TurnTowardsFace",
      path: "/Anki.Vector.external_interface.ExternalInterface/TurnTowardsFace",
      type: GRPCCallType.unary
    )

    internal static let goToObject = GRPCMethodDescriptor(
      name: "GoToObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/GoToObject",
      type: GRPCCallType.unary
    )

    internal static let rollObject = GRPCMethodDescriptor(
      name: "RollObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/RollObject",
      type: GRPCCallType.unary
    )

    internal static let popAWheelie = GRPCMethodDescriptor(
      name: "PopAWheelie",
      path: "/Anki.Vector.external_interface.ExternalInterface/PopAWheelie",
      type: GRPCCallType.unary
    )

    internal static let pickupObject = GRPCMethodDescriptor(
      name: "PickupObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/PickupObject",
      type: GRPCCallType.unary
    )

    internal static let placeObjectOnGroundHere = GRPCMethodDescriptor(
      name: "PlaceObjectOnGroundHere",
      path: "/Anki.Vector.external_interface.ExternalInterface/PlaceObjectOnGroundHere",
      type: GRPCCallType.unary
    )

    internal static let setMasterVolume = GRPCMethodDescriptor(
      name: "SetMasterVolume",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetMasterVolume",
      type: GRPCCallType.unary
    )

    internal static let userAuthentication = GRPCMethodDescriptor(
      name: "UserAuthentication",
      path: "/Anki.Vector.external_interface.ExternalInterface/UserAuthentication",
      type: GRPCCallType.unary
    )

    internal static let batteryState = GRPCMethodDescriptor(
      name: "BatteryState",
      path: "/Anki.Vector.external_interface.ExternalInterface/BatteryState",
      type: GRPCCallType.unary
    )

    internal static let versionState = GRPCMethodDescriptor(
      name: "VersionState",
      path: "/Anki.Vector.external_interface.ExternalInterface/VersionState",
      type: GRPCCallType.unary
    )

    internal static let sayText = GRPCMethodDescriptor(
      name: "SayText",
      path: "/Anki.Vector.external_interface.ExternalInterface/SayText",
      type: GRPCCallType.unary
    )

    internal static let connectCube = GRPCMethodDescriptor(
      name: "ConnectCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/ConnectCube",
      type: GRPCCallType.unary
    )

    internal static let disconnectCube = GRPCMethodDescriptor(
      name: "DisconnectCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/DisconnectCube",
      type: GRPCCallType.unary
    )

    internal static let cubesAvailable = GRPCMethodDescriptor(
      name: "CubesAvailable",
      path: "/Anki.Vector.external_interface.ExternalInterface/CubesAvailable",
      type: GRPCCallType.unary
    )

    internal static let flashCubeLights = GRPCMethodDescriptor(
      name: "FlashCubeLights",
      path: "/Anki.Vector.external_interface.ExternalInterface/FlashCubeLights",
      type: GRPCCallType.unary
    )

    internal static let forgetPreferredCube = GRPCMethodDescriptor(
      name: "ForgetPreferredCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/ForgetPreferredCube",
      type: GRPCCallType.unary
    )

    internal static let setPreferredCube = GRPCMethodDescriptor(
      name: "SetPreferredCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetPreferredCube",
      type: GRPCCallType.unary
    )

    internal static let deleteCustomObjects = GRPCMethodDescriptor(
      name: "DeleteCustomObjects",
      path: "/Anki.Vector.external_interface.ExternalInterface/DeleteCustomObjects",
      type: GRPCCallType.unary
    )

    internal static let createFixedCustomObject = GRPCMethodDescriptor(
      name: "CreateFixedCustomObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/CreateFixedCustomObject",
      type: GRPCCallType.unary
    )

    internal static let defineCustomObject = GRPCMethodDescriptor(
      name: "DefineCustomObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/DefineCustomObject",
      type: GRPCCallType.unary
    )

    internal static let setCubeLights = GRPCMethodDescriptor(
      name: "SetCubeLights",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetCubeLights",
      type: GRPCCallType.unary
    )

    internal static let audioFeed = GRPCMethodDescriptor(
      name: "AudioFeed",
      path: "/Anki.Vector.external_interface.ExternalInterface/AudioFeed",
      type: GRPCCallType.serverStreaming
    )

    internal static let cameraFeed = GRPCMethodDescriptor(
      name: "CameraFeed",
      path: "/Anki.Vector.external_interface.ExternalInterface/CameraFeed",
      type: GRPCCallType.serverStreaming
    )

    internal static let captureSingleImage = GRPCMethodDescriptor(
      name: "CaptureSingleImage",
      path: "/Anki.Vector.external_interface.ExternalInterface/CaptureSingleImage",
      type: GRPCCallType.unary
    )

    internal static let setEyeColor = GRPCMethodDescriptor(
      name: "SetEyeColor",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetEyeColor",
      type: GRPCCallType.unary
    )

    internal static let navMapFeed = GRPCMethodDescriptor(
      name: "NavMapFeed",
      path: "/Anki.Vector.external_interface.ExternalInterface/NavMapFeed",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// The grpc-defined connection between the SDK and Anki's Vector robot.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Anki_Vector_ExternalInterface_ExternalInterfaceProvider: CallHandlerProvider {
  var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceServerInterceptorFactoryProtocol? { get }

  /// Checks the supported protocol version by passing in the client version and
  /// minimum host version and receiving a response to see whether the versions are supported.
  func protocolVersion(request: Anki_Vector_ExternalInterface_ProtocolVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_ProtocolVersionResponse>

  /// SDK-only message to pass version info for device OS, Python version, etc.
  func sDKInitialization(request: Anki_Vector_ExternalInterface_SDKInitializationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_SDKInitializationResponse>

  /// Sets the speed and acceleration for Vector's wheel motors.
  func driveWheels(request: Anki_Vector_ExternalInterface_DriveWheelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DriveWheelsResponse>

  /// Requests that Vector play an animation trigger.
  func playAnimationTrigger(request: Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_PlayAnimationResponse>

  /// Requests that Vector play an animation.
  func playAnimation(request: Anki_Vector_ExternalInterface_PlayAnimationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_PlayAnimationResponse>

  /// Constructs and returns a list of animations.
  func listAnimations(request: Anki_Vector_ExternalInterface_ListAnimationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_ListAnimationsResponse>

  /// Constructs and returns a list of animation triggers.
  func listAnimationTriggers(request: Anki_Vector_ExternalInterface_ListAnimationTriggersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_ListAnimationTriggersResponse>

  /// Moves Vector's head.
  func moveHead(request: Anki_Vector_ExternalInterface_MoveHeadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_MoveHeadResponse>

  /// Moves Vector's lift.
  func moveLift(request: Anki_Vector_ExternalInterface_MoveLiftRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_MoveLiftResponse>

  /// Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
  func stopAllMotors(request: Anki_Vector_ExternalInterface_StopAllMotorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_StopAllMotorsResponse>

  /// Sets screen (Vector's face) to a solid color.
  func displayFaceImageRGB(request: Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse>

  /// Streaming events endpoint
  func eventStream(request: Anki_Vector_ExternalInterface_EventRequest, context: StreamingResponseCallContext<Anki_Vector_ExternalInterface_EventResponse>) -> EventLoopFuture<GRPCStatus>

  /// Play audio using Vector's speaker
  func externalAudioStreamPlayback(context: StreamingResponseCallContext<Anki_Vector_ExternalInterface_ExternalAudioStreamResponse>) -> EventLoopFuture<(StreamEvent<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest>) -> Void>

  /// Integrate with and acquire control of Vector's AI system.
  func behaviorControl(context: StreamingResponseCallContext<Anki_Vector_ExternalInterface_BehaviorControlResponse>) -> EventLoopFuture<(StreamEvent<Anki_Vector_ExternalInterface_BehaviorControlRequest>) -> Void>

  /// Acquire control of Vector's AI system.
  func assumeBehaviorControl(request: Anki_Vector_ExternalInterface_BehaviorControlRequest, context: StreamingResponseCallContext<Anki_Vector_ExternalInterface_BehaviorControlResponse>) -> EventLoopFuture<GRPCStatus>

  func cancelFaceEnrollment(request: Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse>

  /// Get a list of names and their IDs.
  func requestEnrolledNames(request: Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse>

  /// Update the name enrolled for a given face.
  func updateEnrolledFaceByID(request: Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse>

  /// Erase the enrollment (name) record for the face with this ID.
  func eraseEnrolledFaceByID(request: Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse>

  /// Erase the enrollment (name) records for all faces.
  func eraseAllEnrolledFaces(request: Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse>

  func setFaceToEnroll(request: Anki_Vector_ExternalInterface_SetFaceToEnrollRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_SetFaceToEnrollResponse>

  func enableMarkerDetection(request: Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse>

  func enableFaceDetection(request: Anki_Vector_ExternalInterface_EnableFaceDetectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_EnableFaceDetectionResponse>

  func enableMotionDetection(request: Anki_Vector_ExternalInterface_EnableMotionDetectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_EnableMotionDetectionResponse>

  func enableMirrorMode(request: Anki_Vector_ExternalInterface_EnableMirrorModeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_EnableMirrorModeResponse>

  func enableImageStreaming(request: Anki_Vector_ExternalInterface_EnableImageStreamingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_EnableImageStreamingResponse>

  func isImageStreamingEnabled(request: Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse>

  /// Cancel action by id
  func cancelActionByIdTag(request: Anki_Vector_ExternalInterface_CancelActionByIdTagRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_CancelActionByIdTagResponse>

  /// Tells Vector to drive to the specified pose and orientation.
  func goToPose(request: Anki_Vector_ExternalInterface_GoToPoseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_GoToPoseResponse>

  /// Tells Vector to dock with a light cube with a given approach angle and distance.
  func dockWithCube(request: Anki_Vector_ExternalInterface_DockWithCubeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DockWithCubeResponse>

  /// Drive Vector off the charger.
  func driveOffCharger(request: Anki_Vector_ExternalInterface_DriveOffChargerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DriveOffChargerResponse>

  /// Drive Vector onto the charger.
  func driveOnCharger(request: Anki_Vector_ExternalInterface_DriveOnChargerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DriveOnChargerResponse>

  /// Make Vector look for faces by turning and angling his head
  func findFaces(request: Anki_Vector_ExternalInterface_FindFacesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_FindFacesResponse>

  /// Make Vector look around in place by turning and moving his head
  func lookAroundInPlace(request: Anki_Vector_ExternalInterface_LookAroundInPlaceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_LookAroundInPlaceResponse>

  /// Make Vector roll his block, regardless of relative position and orientation
  func rollBlock(request: Anki_Vector_ExternalInterface_RollBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_RollBlockResponse>

  /// Get the photos info.
  func photosInfo(request: Anki_Vector_ExternalInterface_PhotosInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_PhotosInfoResponse>

  /// Get a photo by ID.
  func photo(request: Anki_Vector_ExternalInterface_PhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_PhotoResponse>

  /// Get a thumbnail by ID.
  func thumbnail(request: Anki_Vector_ExternalInterface_ThumbnailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_ThumbnailResponse>

  /// Delete a photo by ID.
  func deletePhoto(request: Anki_Vector_ExternalInterface_DeletePhotoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DeletePhotoResponse>

  /// Tells Vector to drive in a straight line.
  func driveStraight(request: Anki_Vector_ExternalInterface_DriveStraightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DriveStraightResponse>

  /// Turn the robot around its current position.
  func turnInPlace(request: Anki_Vector_ExternalInterface_TurnInPlaceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_TurnInPlaceResponse>

  /// Tell Vector's head to move to a given angle.
  func setHeadAngle(request: Anki_Vector_ExternalInterface_SetHeadAngleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_SetHeadAngleResponse>

  /// Tell Vector's lift to move to a given height.
  func setLiftHeight(request: Anki_Vector_ExternalInterface_SetLiftHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_SetLiftHeightResponse>

  /// Tell Vector to turn towards this face.
  func turnTowardsFace(request: Anki_Vector_ExternalInterface_TurnTowardsFaceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_TurnTowardsFaceResponse>

  /// Tell Vector to drive to the specified object.
  func goToObject(request: Anki_Vector_ExternalInterface_GoToObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_GoToObjectResponse>

  /// Tell Vector to roll his cube.
  func rollObject(request: Anki_Vector_ExternalInterface_RollObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_RollObjectResponse>

  /// Tell Vector to "pop a wheelie" using his cube.
  func popAWheelie(request: Anki_Vector_ExternalInterface_PopAWheelieRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_PopAWheelieResponse>

  /// Instruct the robot to pick up the supplied object.
  func pickupObject(request: Anki_Vector_ExternalInterface_PickupObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_PickupObjectResponse>

  /// Ask Vector to place the object he is carrying on the ground at the current location.
  func placeObjectOnGroundHere(request: Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse>

  /// Set the Robot's master volume
  func setMasterVolume(request: Anki_Vector_ExternalInterface_MasterVolumeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_MasterVolumeResponse>

  func userAuthentication(request: Anki_Vector_ExternalInterface_UserAuthenticationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_UserAuthenticationResponse>

  /// Check the current state of the battery.
  func batteryState(request: Anki_Vector_ExternalInterface_BatteryStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_BatteryStateResponse>

  /// Get the versioning information for Vector.
  func versionState(request: Anki_Vector_ExternalInterface_VersionStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_VersionStateResponse>

  /// Make Vector speak text.
  func sayText(request: Anki_Vector_ExternalInterface_SayTextRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_SayTextResponse>

  /// Attempt to connect to a cube. If a cube is currently connected,
  /// this will do nothing.
  func connectCube(request: Anki_Vector_ExternalInterface_ConnectCubeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_ConnectCubeResponse>

  /// Requests a disconnection from the currently connected cube.
  func disconnectCube(request: Anki_Vector_ExternalInterface_DisconnectCubeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DisconnectCubeResponse>

  func cubesAvailable(request: Anki_Vector_ExternalInterface_CubesAvailableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_CubesAvailableResponse>

  /// Signal a connected cube to flash its lights using the default cube
  /// flash animation.
  func flashCubeLights(request: Anki_Vector_ExternalInterface_FlashCubeLightsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_FlashCubeLightsResponse>

  /// Forget the robot's preferred cube. This will cause the robot to
  /// connect to the cube with the highest RSSI (signal strength) next
  /// time a connection is requested. Saves this preference to disk.
  /// The next cube that the robot connects to will become its
  /// preferred cube.
  func forgetPreferredCube(request: Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse>

  /// Set the robot's preferred cube and save it to disk. The robot
  /// will always attempt to connect to this cube if it is available.
  /// This is only used in simulation for now.
  func setPreferredCube(request: Anki_Vector_ExternalInterface_SetPreferredCubeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_SetPreferredCubeResponse>

  /// Causes the robot to forget about custom objects it currently knows about.
  func deleteCustomObjects(request: Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse>

  /// Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
  func createFixedCustomObject(request: Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse>

  /// Creates a custom object with distinct custom marker(s).
  func defineCustomObject(request: Anki_Vector_ExternalInterface_DefineCustomObjectRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_DefineCustomObjectResponse>

  /// Set each of the lights on the currently connected cube based on two
  /// rgb values each and timing data for how to transition between them.
  func setCubeLights(request: Anki_Vector_ExternalInterface_SetCubeLightsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_SetCubeLightsResponse>

  /// Request an audio feed from the robot.
  func audioFeed(request: Anki_Vector_ExternalInterface_AudioFeedRequest, context: StreamingResponseCallContext<Anki_Vector_ExternalInterface_AudioFeedResponse>) -> EventLoopFuture<GRPCStatus>

  /// Request a camera feed from the robot.
  func cameraFeed(request: Anki_Vector_ExternalInterface_CameraFeedRequest, context: StreamingResponseCallContext<Anki_Vector_ExternalInterface_CameraFeedResponse>) -> EventLoopFuture<GRPCStatus>

  /// Request a single image to be captured and sent from the robot.
  func captureSingleImage(request: Anki_Vector_ExternalInterface_CaptureSingleImageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_CaptureSingleImageResponse>

  /// Set Vector's eye color.
  func setEyeColor(request: Anki_Vector_ExternalInterface_SetEyeColorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Anki_Vector_ExternalInterface_SetEyeColorResponse>

  /// Stream navigation map data.
  func navMapFeed(request: Anki_Vector_ExternalInterface_NavMapFeedRequest, context: StreamingResponseCallContext<Anki_Vector_ExternalInterface_NavMapFeedResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Anki_Vector_ExternalInterface_ExternalInterfaceProvider {
  internal var serviceName: Substring {
    return Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ProtocolVersion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ProtocolVersionRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ProtocolVersionResponse>(),
        interceptors: self.interceptors?.makeProtocolVersionInterceptors() ?? [],
        userFunction: self.protocolVersion(request:context:)
      )

    case "SDKInitialization":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SDKInitializationRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SDKInitializationResponse>(),
        interceptors: self.interceptors?.makeSDKInitializationInterceptors() ?? [],
        userFunction: self.sDKInitialization(request:context:)
      )

    case "DriveWheels":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DriveWheelsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DriveWheelsResponse>(),
        interceptors: self.interceptors?.makeDriveWheelsInterceptors() ?? [],
        userFunction: self.driveWheels(request:context:)
      )

    case "PlayAnimationTrigger":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PlayAnimationResponse>(),
        interceptors: self.interceptors?.makePlayAnimationTriggerInterceptors() ?? [],
        userFunction: self.playAnimationTrigger(request:context:)
      )

    case "PlayAnimation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PlayAnimationRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PlayAnimationResponse>(),
        interceptors: self.interceptors?.makePlayAnimationInterceptors() ?? [],
        userFunction: self.playAnimation(request:context:)
      )

    case "ListAnimations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ListAnimationsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ListAnimationsResponse>(),
        interceptors: self.interceptors?.makeListAnimationsInterceptors() ?? [],
        userFunction: self.listAnimations(request:context:)
      )

    case "ListAnimationTriggers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ListAnimationTriggersRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ListAnimationTriggersResponse>(),
        interceptors: self.interceptors?.makeListAnimationTriggersInterceptors() ?? [],
        userFunction: self.listAnimationTriggers(request:context:)
      )

    case "MoveHead":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_MoveHeadRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_MoveHeadResponse>(),
        interceptors: self.interceptors?.makeMoveHeadInterceptors() ?? [],
        userFunction: self.moveHead(request:context:)
      )

    case "MoveLift":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_MoveLiftRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_MoveLiftResponse>(),
        interceptors: self.interceptors?.makeMoveLiftInterceptors() ?? [],
        userFunction: self.moveLift(request:context:)
      )

    case "StopAllMotors":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_StopAllMotorsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_StopAllMotorsResponse>(),
        interceptors: self.interceptors?.makeStopAllMotorsInterceptors() ?? [],
        userFunction: self.stopAllMotors(request:context:)
      )

    case "DisplayFaceImageRGB":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse>(),
        interceptors: self.interceptors?.makeDisplayFaceImageRGBInterceptors() ?? [],
        userFunction: self.displayFaceImageRGB(request:context:)
      )

    case "EventStream":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EventRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EventResponse>(),
        interceptors: self.interceptors?.makeEventStreamInterceptors() ?? [],
        userFunction: self.eventStream(request:context:)
      )

    case "ExternalAudioStreamPlayback":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ExternalAudioStreamResponse>(),
        interceptors: self.interceptors?.makeExternalAudioStreamPlaybackInterceptors() ?? [],
        observerFactory: self.externalAudioStreamPlayback(context:)
      )

    case "BehaviorControl":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_BehaviorControlRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_BehaviorControlResponse>(),
        interceptors: self.interceptors?.makeBehaviorControlInterceptors() ?? [],
        observerFactory: self.behaviorControl(context:)
      )

    case "AssumeBehaviorControl":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_BehaviorControlRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_BehaviorControlResponse>(),
        interceptors: self.interceptors?.makeAssumeBehaviorControlInterceptors() ?? [],
        userFunction: self.assumeBehaviorControl(request:context:)
      )

    case "CancelFaceEnrollment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse>(),
        interceptors: self.interceptors?.makeCancelFaceEnrollmentInterceptors() ?? [],
        userFunction: self.cancelFaceEnrollment(request:context:)
      )

    case "RequestEnrolledNames":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse>(),
        interceptors: self.interceptors?.makeRequestEnrolledNamesInterceptors() ?? [],
        userFunction: self.requestEnrolledNames(request:context:)
      )

    case "UpdateEnrolledFaceByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse>(),
        interceptors: self.interceptors?.makeUpdateEnrolledFaceByIDInterceptors() ?? [],
        userFunction: self.updateEnrolledFaceByID(request:context:)
      )

    case "EraseEnrolledFaceByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse>(),
        interceptors: self.interceptors?.makeEraseEnrolledFaceByIDInterceptors() ?? [],
        userFunction: self.eraseEnrolledFaceByID(request:context:)
      )

    case "EraseAllEnrolledFaces":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse>(),
        interceptors: self.interceptors?.makeEraseAllEnrolledFacesInterceptors() ?? [],
        userFunction: self.eraseAllEnrolledFaces(request:context:)
      )

    case "SetFaceToEnroll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetFaceToEnrollRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetFaceToEnrollResponse>(),
        interceptors: self.interceptors?.makeSetFaceToEnrollInterceptors() ?? [],
        userFunction: self.setFaceToEnroll(request:context:)
      )

    case "EnableMarkerDetection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse>(),
        interceptors: self.interceptors?.makeEnableMarkerDetectionInterceptors() ?? [],
        userFunction: self.enableMarkerDetection(request:context:)
      )

    case "EnableFaceDetection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableFaceDetectionRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableFaceDetectionResponse>(),
        interceptors: self.interceptors?.makeEnableFaceDetectionInterceptors() ?? [],
        userFunction: self.enableFaceDetection(request:context:)
      )

    case "EnableMotionDetection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableMotionDetectionRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableMotionDetectionResponse>(),
        interceptors: self.interceptors?.makeEnableMotionDetectionInterceptors() ?? [],
        userFunction: self.enableMotionDetection(request:context:)
      )

    case "EnableMirrorMode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableMirrorModeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableMirrorModeResponse>(),
        interceptors: self.interceptors?.makeEnableMirrorModeInterceptors() ?? [],
        userFunction: self.enableMirrorMode(request:context:)
      )

    case "EnableImageStreaming":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableImageStreamingRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableImageStreamingResponse>(),
        interceptors: self.interceptors?.makeEnableImageStreamingInterceptors() ?? [],
        userFunction: self.enableImageStreaming(request:context:)
      )

    case "IsImageStreamingEnabled":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse>(),
        interceptors: self.interceptors?.makeIsImageStreamingEnabledInterceptors() ?? [],
        userFunction: self.isImageStreamingEnabled(request:context:)
      )

    case "CancelActionByIdTag":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CancelActionByIdTagRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CancelActionByIdTagResponse>(),
        interceptors: self.interceptors?.makeCancelActionByIdTagInterceptors() ?? [],
        userFunction: self.cancelActionByIdTag(request:context:)
      )

    case "GoToPose":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_GoToPoseRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_GoToPoseResponse>(),
        interceptors: self.interceptors?.makeGoToPoseInterceptors() ?? [],
        userFunction: self.goToPose(request:context:)
      )

    case "DockWithCube":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DockWithCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DockWithCubeResponse>(),
        interceptors: self.interceptors?.makeDockWithCubeInterceptors() ?? [],
        userFunction: self.dockWithCube(request:context:)
      )

    case "DriveOffCharger":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DriveOffChargerRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DriveOffChargerResponse>(),
        interceptors: self.interceptors?.makeDriveOffChargerInterceptors() ?? [],
        userFunction: self.driveOffCharger(request:context:)
      )

    case "DriveOnCharger":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DriveOnChargerRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DriveOnChargerResponse>(),
        interceptors: self.interceptors?.makeDriveOnChargerInterceptors() ?? [],
        userFunction: self.driveOnCharger(request:context:)
      )

    case "FindFaces":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_FindFacesRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_FindFacesResponse>(),
        interceptors: self.interceptors?.makeFindFacesInterceptors() ?? [],
        userFunction: self.findFaces(request:context:)
      )

    case "LookAroundInPlace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_LookAroundInPlaceRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_LookAroundInPlaceResponse>(),
        interceptors: self.interceptors?.makeLookAroundInPlaceInterceptors() ?? [],
        userFunction: self.lookAroundInPlace(request:context:)
      )

    case "RollBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_RollBlockRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_RollBlockResponse>(),
        interceptors: self.interceptors?.makeRollBlockInterceptors() ?? [],
        userFunction: self.rollBlock(request:context:)
      )

    case "PhotosInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PhotosInfoRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PhotosInfoResponse>(),
        interceptors: self.interceptors?.makePhotosInfoInterceptors() ?? [],
        userFunction: self.photosInfo(request:context:)
      )

    case "Photo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PhotoRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PhotoResponse>(),
        interceptors: self.interceptors?.makePhotoInterceptors() ?? [],
        userFunction: self.photo(request:context:)
      )

    case "Thumbnail":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ThumbnailRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ThumbnailResponse>(),
        interceptors: self.interceptors?.makeThumbnailInterceptors() ?? [],
        userFunction: self.thumbnail(request:context:)
      )

    case "DeletePhoto":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DeletePhotoRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DeletePhotoResponse>(),
        interceptors: self.interceptors?.makeDeletePhotoInterceptors() ?? [],
        userFunction: self.deletePhoto(request:context:)
      )

    case "DriveStraight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DriveStraightRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DriveStraightResponse>(),
        interceptors: self.interceptors?.makeDriveStraightInterceptors() ?? [],
        userFunction: self.driveStraight(request:context:)
      )

    case "TurnInPlace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_TurnInPlaceRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_TurnInPlaceResponse>(),
        interceptors: self.interceptors?.makeTurnInPlaceInterceptors() ?? [],
        userFunction: self.turnInPlace(request:context:)
      )

    case "SetHeadAngle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetHeadAngleRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetHeadAngleResponse>(),
        interceptors: self.interceptors?.makeSetHeadAngleInterceptors() ?? [],
        userFunction: self.setHeadAngle(request:context:)
      )

    case "SetLiftHeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetLiftHeightRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetLiftHeightResponse>(),
        interceptors: self.interceptors?.makeSetLiftHeightInterceptors() ?? [],
        userFunction: self.setLiftHeight(request:context:)
      )

    case "TurnTowardsFace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_TurnTowardsFaceRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_TurnTowardsFaceResponse>(),
        interceptors: self.interceptors?.makeTurnTowardsFaceInterceptors() ?? [],
        userFunction: self.turnTowardsFace(request:context:)
      )

    case "GoToObject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_GoToObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_GoToObjectResponse>(),
        interceptors: self.interceptors?.makeGoToObjectInterceptors() ?? [],
        userFunction: self.goToObject(request:context:)
      )

    case "RollObject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_RollObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_RollObjectResponse>(),
        interceptors: self.interceptors?.makeRollObjectInterceptors() ?? [],
        userFunction: self.rollObject(request:context:)
      )

    case "PopAWheelie":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PopAWheelieRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PopAWheelieResponse>(),
        interceptors: self.interceptors?.makePopAWheelieInterceptors() ?? [],
        userFunction: self.popAWheelie(request:context:)
      )

    case "PickupObject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PickupObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PickupObjectResponse>(),
        interceptors: self.interceptors?.makePickupObjectInterceptors() ?? [],
        userFunction: self.pickupObject(request:context:)
      )

    case "PlaceObjectOnGroundHere":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse>(),
        interceptors: self.interceptors?.makePlaceObjectOnGroundHereInterceptors() ?? [],
        userFunction: self.placeObjectOnGroundHere(request:context:)
      )

    case "SetMasterVolume":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_MasterVolumeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_MasterVolumeResponse>(),
        interceptors: self.interceptors?.makeSetMasterVolumeInterceptors() ?? [],
        userFunction: self.setMasterVolume(request:context:)
      )

    case "UserAuthentication":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_UserAuthenticationRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_UserAuthenticationResponse>(),
        interceptors: self.interceptors?.makeUserAuthenticationInterceptors() ?? [],
        userFunction: self.userAuthentication(request:context:)
      )

    case "BatteryState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_BatteryStateRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_BatteryStateResponse>(),
        interceptors: self.interceptors?.makeBatteryStateInterceptors() ?? [],
        userFunction: self.batteryState(request:context:)
      )

    case "VersionState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_VersionStateRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_VersionStateResponse>(),
        interceptors: self.interceptors?.makeVersionStateInterceptors() ?? [],
        userFunction: self.versionState(request:context:)
      )

    case "SayText":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SayTextRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SayTextResponse>(),
        interceptors: self.interceptors?.makeSayTextInterceptors() ?? [],
        userFunction: self.sayText(request:context:)
      )

    case "ConnectCube":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ConnectCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ConnectCubeResponse>(),
        interceptors: self.interceptors?.makeConnectCubeInterceptors() ?? [],
        userFunction: self.connectCube(request:context:)
      )

    case "DisconnectCube":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DisconnectCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DisconnectCubeResponse>(),
        interceptors: self.interceptors?.makeDisconnectCubeInterceptors() ?? [],
        userFunction: self.disconnectCube(request:context:)
      )

    case "CubesAvailable":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CubesAvailableRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CubesAvailableResponse>(),
        interceptors: self.interceptors?.makeCubesAvailableInterceptors() ?? [],
        userFunction: self.cubesAvailable(request:context:)
      )

    case "FlashCubeLights":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_FlashCubeLightsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_FlashCubeLightsResponse>(),
        interceptors: self.interceptors?.makeFlashCubeLightsInterceptors() ?? [],
        userFunction: self.flashCubeLights(request:context:)
      )

    case "ForgetPreferredCube":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse>(),
        interceptors: self.interceptors?.makeForgetPreferredCubeInterceptors() ?? [],
        userFunction: self.forgetPreferredCube(request:context:)
      )

    case "SetPreferredCube":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetPreferredCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetPreferredCubeResponse>(),
        interceptors: self.interceptors?.makeSetPreferredCubeInterceptors() ?? [],
        userFunction: self.setPreferredCube(request:context:)
      )

    case "DeleteCustomObjects":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse>(),
        interceptors: self.interceptors?.makeDeleteCustomObjectsInterceptors() ?? [],
        userFunction: self.deleteCustomObjects(request:context:)
      )

    case "CreateFixedCustomObject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse>(),
        interceptors: self.interceptors?.makeCreateFixedCustomObjectInterceptors() ?? [],
        userFunction: self.createFixedCustomObject(request:context:)
      )

    case "DefineCustomObject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DefineCustomObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DefineCustomObjectResponse>(),
        interceptors: self.interceptors?.makeDefineCustomObjectInterceptors() ?? [],
        userFunction: self.defineCustomObject(request:context:)
      )

    case "SetCubeLights":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetCubeLightsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetCubeLightsResponse>(),
        interceptors: self.interceptors?.makeSetCubeLightsInterceptors() ?? [],
        userFunction: self.setCubeLights(request:context:)
      )

    case "AudioFeed":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_AudioFeedRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_AudioFeedResponse>(),
        interceptors: self.interceptors?.makeAudioFeedInterceptors() ?? [],
        userFunction: self.audioFeed(request:context:)
      )

    case "CameraFeed":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CameraFeedRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CameraFeedResponse>(),
        interceptors: self.interceptors?.makeCameraFeedInterceptors() ?? [],
        userFunction: self.cameraFeed(request:context:)
      )

    case "CaptureSingleImage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CaptureSingleImageRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CaptureSingleImageResponse>(),
        interceptors: self.interceptors?.makeCaptureSingleImageInterceptors() ?? [],
        userFunction: self.captureSingleImage(request:context:)
      )

    case "SetEyeColor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetEyeColorRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetEyeColorResponse>(),
        interceptors: self.interceptors?.makeSetEyeColorInterceptors() ?? [],
        userFunction: self.setEyeColor(request:context:)
      )

    case "NavMapFeed":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_NavMapFeedRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_NavMapFeedResponse>(),
        interceptors: self.interceptors?.makeNavMapFeedInterceptors() ?? [],
        userFunction: self.navMapFeed(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// The grpc-defined connection between the SDK and Anki's Vector robot.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Anki_Vector_ExternalInterface_ExternalInterfaceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceServerInterceptorFactoryProtocol? { get }

  /// Checks the supported protocol version by passing in the client version and
  /// minimum host version and receiving a response to see whether the versions are supported.
  @Sendable func protocolVersion(
    request: Anki_Vector_ExternalInterface_ProtocolVersionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_ProtocolVersionResponse

  /// SDK-only message to pass version info for device OS, Python version, etc.
  @Sendable func sDKInitialization(
    request: Anki_Vector_ExternalInterface_SDKInitializationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_SDKInitializationResponse

  /// Sets the speed and acceleration for Vector's wheel motors.
  @Sendable func driveWheels(
    request: Anki_Vector_ExternalInterface_DriveWheelsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DriveWheelsResponse

  /// Requests that Vector play an animation trigger.
  @Sendable func playAnimationTrigger(
    request: Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_PlayAnimationResponse

  /// Requests that Vector play an animation.
  @Sendable func playAnimation(
    request: Anki_Vector_ExternalInterface_PlayAnimationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_PlayAnimationResponse

  /// Constructs and returns a list of animations.
  @Sendable func listAnimations(
    request: Anki_Vector_ExternalInterface_ListAnimationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_ListAnimationsResponse

  /// Constructs and returns a list of animation triggers.
  @Sendable func listAnimationTriggers(
    request: Anki_Vector_ExternalInterface_ListAnimationTriggersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_ListAnimationTriggersResponse

  /// Moves Vector's head.
  @Sendable func moveHead(
    request: Anki_Vector_ExternalInterface_MoveHeadRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_MoveHeadResponse

  /// Moves Vector's lift.
  @Sendable func moveLift(
    request: Anki_Vector_ExternalInterface_MoveLiftRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_MoveLiftResponse

  /// Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
  @Sendable func stopAllMotors(
    request: Anki_Vector_ExternalInterface_StopAllMotorsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_StopAllMotorsResponse

  /// Sets screen (Vector's face) to a solid color.
  @Sendable func displayFaceImageRGB(
    request: Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse

  /// Streaming events endpoint
  @Sendable func eventStream(
    request: Anki_Vector_ExternalInterface_EventRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Anki_Vector_ExternalInterface_EventResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Play audio using Vector's speaker
  @Sendable func externalAudioStreamPlayback(
    requestStream: GRPCAsyncRequestStream<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Anki_Vector_ExternalInterface_ExternalAudioStreamResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Integrate with and acquire control of Vector's AI system.
  @Sendable func behaviorControl(
    requestStream: GRPCAsyncRequestStream<Anki_Vector_ExternalInterface_BehaviorControlRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Anki_Vector_ExternalInterface_BehaviorControlResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Acquire control of Vector's AI system.
  @Sendable func assumeBehaviorControl(
    request: Anki_Vector_ExternalInterface_BehaviorControlRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Anki_Vector_ExternalInterface_BehaviorControlResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func cancelFaceEnrollment(
    request: Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse

  /// Get a list of names and their IDs.
  @Sendable func requestEnrolledNames(
    request: Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse

  /// Update the name enrolled for a given face.
  @Sendable func updateEnrolledFaceByID(
    request: Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse

  /// Erase the enrollment (name) record for the face with this ID.
  @Sendable func eraseEnrolledFaceByID(
    request: Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse

  /// Erase the enrollment (name) records for all faces.
  @Sendable func eraseAllEnrolledFaces(
    request: Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse

  @Sendable func setFaceToEnroll(
    request: Anki_Vector_ExternalInterface_SetFaceToEnrollRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_SetFaceToEnrollResponse

  @Sendable func enableMarkerDetection(
    request: Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse

  @Sendable func enableFaceDetection(
    request: Anki_Vector_ExternalInterface_EnableFaceDetectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_EnableFaceDetectionResponse

  @Sendable func enableMotionDetection(
    request: Anki_Vector_ExternalInterface_EnableMotionDetectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_EnableMotionDetectionResponse

  @Sendable func enableMirrorMode(
    request: Anki_Vector_ExternalInterface_EnableMirrorModeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_EnableMirrorModeResponse

  @Sendable func enableImageStreaming(
    request: Anki_Vector_ExternalInterface_EnableImageStreamingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_EnableImageStreamingResponse

  @Sendable func isImageStreamingEnabled(
    request: Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse

  /// Cancel action by id
  @Sendable func cancelActionByIdTag(
    request: Anki_Vector_ExternalInterface_CancelActionByIdTagRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_CancelActionByIdTagResponse

  /// Tells Vector to drive to the specified pose and orientation.
  @Sendable func goToPose(
    request: Anki_Vector_ExternalInterface_GoToPoseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_GoToPoseResponse

  /// Tells Vector to dock with a light cube with a given approach angle and distance.
  @Sendable func dockWithCube(
    request: Anki_Vector_ExternalInterface_DockWithCubeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DockWithCubeResponse

  /// Drive Vector off the charger.
  @Sendable func driveOffCharger(
    request: Anki_Vector_ExternalInterface_DriveOffChargerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DriveOffChargerResponse

  /// Drive Vector onto the charger.
  @Sendable func driveOnCharger(
    request: Anki_Vector_ExternalInterface_DriveOnChargerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DriveOnChargerResponse

  /// Make Vector look for faces by turning and angling his head
  @Sendable func findFaces(
    request: Anki_Vector_ExternalInterface_FindFacesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_FindFacesResponse

  /// Make Vector look around in place by turning and moving his head
  @Sendable func lookAroundInPlace(
    request: Anki_Vector_ExternalInterface_LookAroundInPlaceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_LookAroundInPlaceResponse

  /// Make Vector roll his block, regardless of relative position and orientation
  @Sendable func rollBlock(
    request: Anki_Vector_ExternalInterface_RollBlockRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_RollBlockResponse

  /// Get the photos info.
  @Sendable func photosInfo(
    request: Anki_Vector_ExternalInterface_PhotosInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_PhotosInfoResponse

  /// Get a photo by ID.
  @Sendable func photo(
    request: Anki_Vector_ExternalInterface_PhotoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_PhotoResponse

  /// Get a thumbnail by ID.
  @Sendable func thumbnail(
    request: Anki_Vector_ExternalInterface_ThumbnailRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_ThumbnailResponse

  /// Delete a photo by ID.
  @Sendable func deletePhoto(
    request: Anki_Vector_ExternalInterface_DeletePhotoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DeletePhotoResponse

  /// Tells Vector to drive in a straight line.
  @Sendable func driveStraight(
    request: Anki_Vector_ExternalInterface_DriveStraightRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DriveStraightResponse

  /// Turn the robot around its current position.
  @Sendable func turnInPlace(
    request: Anki_Vector_ExternalInterface_TurnInPlaceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_TurnInPlaceResponse

  /// Tell Vector's head to move to a given angle.
  @Sendable func setHeadAngle(
    request: Anki_Vector_ExternalInterface_SetHeadAngleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_SetHeadAngleResponse

  /// Tell Vector's lift to move to a given height.
  @Sendable func setLiftHeight(
    request: Anki_Vector_ExternalInterface_SetLiftHeightRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_SetLiftHeightResponse

  /// Tell Vector to turn towards this face.
  @Sendable func turnTowardsFace(
    request: Anki_Vector_ExternalInterface_TurnTowardsFaceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_TurnTowardsFaceResponse

  /// Tell Vector to drive to the specified object.
  @Sendable func goToObject(
    request: Anki_Vector_ExternalInterface_GoToObjectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_GoToObjectResponse

  /// Tell Vector to roll his cube.
  @Sendable func rollObject(
    request: Anki_Vector_ExternalInterface_RollObjectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_RollObjectResponse

  /// Tell Vector to "pop a wheelie" using his cube.
  @Sendable func popAWheelie(
    request: Anki_Vector_ExternalInterface_PopAWheelieRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_PopAWheelieResponse

  /// Instruct the robot to pick up the supplied object.
  @Sendable func pickupObject(
    request: Anki_Vector_ExternalInterface_PickupObjectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_PickupObjectResponse

  /// Ask Vector to place the object he is carrying on the ground at the current location.
  @Sendable func placeObjectOnGroundHere(
    request: Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse

  /// Set the Robot's master volume
  @Sendable func setMasterVolume(
    request: Anki_Vector_ExternalInterface_MasterVolumeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_MasterVolumeResponse

  @Sendable func userAuthentication(
    request: Anki_Vector_ExternalInterface_UserAuthenticationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_UserAuthenticationResponse

  /// Check the current state of the battery.
  @Sendable func batteryState(
    request: Anki_Vector_ExternalInterface_BatteryStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_BatteryStateResponse

  /// Get the versioning information for Vector.
  @Sendable func versionState(
    request: Anki_Vector_ExternalInterface_VersionStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_VersionStateResponse

  /// Make Vector speak text.
  @Sendable func sayText(
    request: Anki_Vector_ExternalInterface_SayTextRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_SayTextResponse

  /// Attempt to connect to a cube. If a cube is currently connected,
  /// this will do nothing.
  @Sendable func connectCube(
    request: Anki_Vector_ExternalInterface_ConnectCubeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_ConnectCubeResponse

  /// Requests a disconnection from the currently connected cube.
  @Sendable func disconnectCube(
    request: Anki_Vector_ExternalInterface_DisconnectCubeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DisconnectCubeResponse

  @Sendable func cubesAvailable(
    request: Anki_Vector_ExternalInterface_CubesAvailableRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_CubesAvailableResponse

  /// Signal a connected cube to flash its lights using the default cube
  /// flash animation.
  @Sendable func flashCubeLights(
    request: Anki_Vector_ExternalInterface_FlashCubeLightsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_FlashCubeLightsResponse

  /// Forget the robot's preferred cube. This will cause the robot to
  /// connect to the cube with the highest RSSI (signal strength) next
  /// time a connection is requested. Saves this preference to disk.
  /// The next cube that the robot connects to will become its
  /// preferred cube.
  @Sendable func forgetPreferredCube(
    request: Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse

  /// Set the robot's preferred cube and save it to disk. The robot
  /// will always attempt to connect to this cube if it is available.
  /// This is only used in simulation for now.
  @Sendable func setPreferredCube(
    request: Anki_Vector_ExternalInterface_SetPreferredCubeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_SetPreferredCubeResponse

  /// Causes the robot to forget about custom objects it currently knows about.
  @Sendable func deleteCustomObjects(
    request: Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse

  /// Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
  @Sendable func createFixedCustomObject(
    request: Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse

  /// Creates a custom object with distinct custom marker(s).
  @Sendable func defineCustomObject(
    request: Anki_Vector_ExternalInterface_DefineCustomObjectRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_DefineCustomObjectResponse

  /// Set each of the lights on the currently connected cube based on two
  /// rgb values each and timing data for how to transition between them.
  @Sendable func setCubeLights(
    request: Anki_Vector_ExternalInterface_SetCubeLightsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_SetCubeLightsResponse

  /// Request an audio feed from the robot.
  @Sendable func audioFeed(
    request: Anki_Vector_ExternalInterface_AudioFeedRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Anki_Vector_ExternalInterface_AudioFeedResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Request a camera feed from the robot.
  @Sendable func cameraFeed(
    request: Anki_Vector_ExternalInterface_CameraFeedRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Anki_Vector_ExternalInterface_CameraFeedResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Request a single image to be captured and sent from the robot.
  @Sendable func captureSingleImage(
    request: Anki_Vector_ExternalInterface_CaptureSingleImageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_CaptureSingleImageResponse

  /// Set Vector's eye color.
  @Sendable func setEyeColor(
    request: Anki_Vector_ExternalInterface_SetEyeColorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Anki_Vector_ExternalInterface_SetEyeColorResponse

  /// Stream navigation map data.
  @Sendable func navMapFeed(
    request: Anki_Vector_ExternalInterface_NavMapFeedRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Anki_Vector_ExternalInterface_NavMapFeedResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Anki_Vector_ExternalInterface_ExternalInterfaceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Anki_Vector_ExternalInterface_ExternalInterfaceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ProtocolVersion":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ProtocolVersionRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ProtocolVersionResponse>(),
        interceptors: self.interceptors?.makeProtocolVersionInterceptors() ?? [],
        wrapping: self.protocolVersion(request:context:)
      )

    case "SDKInitialization":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SDKInitializationRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SDKInitializationResponse>(),
        interceptors: self.interceptors?.makeSDKInitializationInterceptors() ?? [],
        wrapping: self.sDKInitialization(request:context:)
      )

    case "DriveWheels":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DriveWheelsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DriveWheelsResponse>(),
        interceptors: self.interceptors?.makeDriveWheelsInterceptors() ?? [],
        wrapping: self.driveWheels(request:context:)
      )

    case "PlayAnimationTrigger":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PlayAnimationResponse>(),
        interceptors: self.interceptors?.makePlayAnimationTriggerInterceptors() ?? [],
        wrapping: self.playAnimationTrigger(request:context:)
      )

    case "PlayAnimation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PlayAnimationRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PlayAnimationResponse>(),
        interceptors: self.interceptors?.makePlayAnimationInterceptors() ?? [],
        wrapping: self.playAnimation(request:context:)
      )

    case "ListAnimations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ListAnimationsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ListAnimationsResponse>(),
        interceptors: self.interceptors?.makeListAnimationsInterceptors() ?? [],
        wrapping: self.listAnimations(request:context:)
      )

    case "ListAnimationTriggers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ListAnimationTriggersRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ListAnimationTriggersResponse>(),
        interceptors: self.interceptors?.makeListAnimationTriggersInterceptors() ?? [],
        wrapping: self.listAnimationTriggers(request:context:)
      )

    case "MoveHead":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_MoveHeadRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_MoveHeadResponse>(),
        interceptors: self.interceptors?.makeMoveHeadInterceptors() ?? [],
        wrapping: self.moveHead(request:context:)
      )

    case "MoveLift":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_MoveLiftRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_MoveLiftResponse>(),
        interceptors: self.interceptors?.makeMoveLiftInterceptors() ?? [],
        wrapping: self.moveLift(request:context:)
      )

    case "StopAllMotors":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_StopAllMotorsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_StopAllMotorsResponse>(),
        interceptors: self.interceptors?.makeStopAllMotorsInterceptors() ?? [],
        wrapping: self.stopAllMotors(request:context:)
      )

    case "DisplayFaceImageRGB":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse>(),
        interceptors: self.interceptors?.makeDisplayFaceImageRGBInterceptors() ?? [],
        wrapping: self.displayFaceImageRGB(request:context:)
      )

    case "EventStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EventRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EventResponse>(),
        interceptors: self.interceptors?.makeEventStreamInterceptors() ?? [],
        wrapping: self.eventStream(request:responseStream:context:)
      )

    case "ExternalAudioStreamPlayback":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ExternalAudioStreamResponse>(),
        interceptors: self.interceptors?.makeExternalAudioStreamPlaybackInterceptors() ?? [],
        wrapping: self.externalAudioStreamPlayback(requestStream:responseStream:context:)
      )

    case "BehaviorControl":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_BehaviorControlRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_BehaviorControlResponse>(),
        interceptors: self.interceptors?.makeBehaviorControlInterceptors() ?? [],
        wrapping: self.behaviorControl(requestStream:responseStream:context:)
      )

    case "AssumeBehaviorControl":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_BehaviorControlRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_BehaviorControlResponse>(),
        interceptors: self.interceptors?.makeAssumeBehaviorControlInterceptors() ?? [],
        wrapping: self.assumeBehaviorControl(request:responseStream:context:)
      )

    case "CancelFaceEnrollment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse>(),
        interceptors: self.interceptors?.makeCancelFaceEnrollmentInterceptors() ?? [],
        wrapping: self.cancelFaceEnrollment(request:context:)
      )

    case "RequestEnrolledNames":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse>(),
        interceptors: self.interceptors?.makeRequestEnrolledNamesInterceptors() ?? [],
        wrapping: self.requestEnrolledNames(request:context:)
      )

    case "UpdateEnrolledFaceByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse>(),
        interceptors: self.interceptors?.makeUpdateEnrolledFaceByIDInterceptors() ?? [],
        wrapping: self.updateEnrolledFaceByID(request:context:)
      )

    case "EraseEnrolledFaceByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse>(),
        interceptors: self.interceptors?.makeEraseEnrolledFaceByIDInterceptors() ?? [],
        wrapping: self.eraseEnrolledFaceByID(request:context:)
      )

    case "EraseAllEnrolledFaces":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse>(),
        interceptors: self.interceptors?.makeEraseAllEnrolledFacesInterceptors() ?? [],
        wrapping: self.eraseAllEnrolledFaces(request:context:)
      )

    case "SetFaceToEnroll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetFaceToEnrollRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetFaceToEnrollResponse>(),
        interceptors: self.interceptors?.makeSetFaceToEnrollInterceptors() ?? [],
        wrapping: self.setFaceToEnroll(request:context:)
      )

    case "EnableMarkerDetection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse>(),
        interceptors: self.interceptors?.makeEnableMarkerDetectionInterceptors() ?? [],
        wrapping: self.enableMarkerDetection(request:context:)
      )

    case "EnableFaceDetection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableFaceDetectionRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableFaceDetectionResponse>(),
        interceptors: self.interceptors?.makeEnableFaceDetectionInterceptors() ?? [],
        wrapping: self.enableFaceDetection(request:context:)
      )

    case "EnableMotionDetection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableMotionDetectionRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableMotionDetectionResponse>(),
        interceptors: self.interceptors?.makeEnableMotionDetectionInterceptors() ?? [],
        wrapping: self.enableMotionDetection(request:context:)
      )

    case "EnableMirrorMode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableMirrorModeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableMirrorModeResponse>(),
        interceptors: self.interceptors?.makeEnableMirrorModeInterceptors() ?? [],
        wrapping: self.enableMirrorMode(request:context:)
      )

    case "EnableImageStreaming":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_EnableImageStreamingRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_EnableImageStreamingResponse>(),
        interceptors: self.interceptors?.makeEnableImageStreamingInterceptors() ?? [],
        wrapping: self.enableImageStreaming(request:context:)
      )

    case "IsImageStreamingEnabled":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse>(),
        interceptors: self.interceptors?.makeIsImageStreamingEnabledInterceptors() ?? [],
        wrapping: self.isImageStreamingEnabled(request:context:)
      )

    case "CancelActionByIdTag":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CancelActionByIdTagRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CancelActionByIdTagResponse>(),
        interceptors: self.interceptors?.makeCancelActionByIdTagInterceptors() ?? [],
        wrapping: self.cancelActionByIdTag(request:context:)
      )

    case "GoToPose":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_GoToPoseRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_GoToPoseResponse>(),
        interceptors: self.interceptors?.makeGoToPoseInterceptors() ?? [],
        wrapping: self.goToPose(request:context:)
      )

    case "DockWithCube":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DockWithCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DockWithCubeResponse>(),
        interceptors: self.interceptors?.makeDockWithCubeInterceptors() ?? [],
        wrapping: self.dockWithCube(request:context:)
      )

    case "DriveOffCharger":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DriveOffChargerRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DriveOffChargerResponse>(),
        interceptors: self.interceptors?.makeDriveOffChargerInterceptors() ?? [],
        wrapping: self.driveOffCharger(request:context:)
      )

    case "DriveOnCharger":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DriveOnChargerRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DriveOnChargerResponse>(),
        interceptors: self.interceptors?.makeDriveOnChargerInterceptors() ?? [],
        wrapping: self.driveOnCharger(request:context:)
      )

    case "FindFaces":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_FindFacesRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_FindFacesResponse>(),
        interceptors: self.interceptors?.makeFindFacesInterceptors() ?? [],
        wrapping: self.findFaces(request:context:)
      )

    case "LookAroundInPlace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_LookAroundInPlaceRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_LookAroundInPlaceResponse>(),
        interceptors: self.interceptors?.makeLookAroundInPlaceInterceptors() ?? [],
        wrapping: self.lookAroundInPlace(request:context:)
      )

    case "RollBlock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_RollBlockRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_RollBlockResponse>(),
        interceptors: self.interceptors?.makeRollBlockInterceptors() ?? [],
        wrapping: self.rollBlock(request:context:)
      )

    case "PhotosInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PhotosInfoRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PhotosInfoResponse>(),
        interceptors: self.interceptors?.makePhotosInfoInterceptors() ?? [],
        wrapping: self.photosInfo(request:context:)
      )

    case "Photo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PhotoRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PhotoResponse>(),
        interceptors: self.interceptors?.makePhotoInterceptors() ?? [],
        wrapping: self.photo(request:context:)
      )

    case "Thumbnail":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ThumbnailRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ThumbnailResponse>(),
        interceptors: self.interceptors?.makeThumbnailInterceptors() ?? [],
        wrapping: self.thumbnail(request:context:)
      )

    case "DeletePhoto":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DeletePhotoRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DeletePhotoResponse>(),
        interceptors: self.interceptors?.makeDeletePhotoInterceptors() ?? [],
        wrapping: self.deletePhoto(request:context:)
      )

    case "DriveStraight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DriveStraightRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DriveStraightResponse>(),
        interceptors: self.interceptors?.makeDriveStraightInterceptors() ?? [],
        wrapping: self.driveStraight(request:context:)
      )

    case "TurnInPlace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_TurnInPlaceRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_TurnInPlaceResponse>(),
        interceptors: self.interceptors?.makeTurnInPlaceInterceptors() ?? [],
        wrapping: self.turnInPlace(request:context:)
      )

    case "SetHeadAngle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetHeadAngleRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetHeadAngleResponse>(),
        interceptors: self.interceptors?.makeSetHeadAngleInterceptors() ?? [],
        wrapping: self.setHeadAngle(request:context:)
      )

    case "SetLiftHeight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetLiftHeightRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetLiftHeightResponse>(),
        interceptors: self.interceptors?.makeSetLiftHeightInterceptors() ?? [],
        wrapping: self.setLiftHeight(request:context:)
      )

    case "TurnTowardsFace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_TurnTowardsFaceRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_TurnTowardsFaceResponse>(),
        interceptors: self.interceptors?.makeTurnTowardsFaceInterceptors() ?? [],
        wrapping: self.turnTowardsFace(request:context:)
      )

    case "GoToObject":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_GoToObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_GoToObjectResponse>(),
        interceptors: self.interceptors?.makeGoToObjectInterceptors() ?? [],
        wrapping: self.goToObject(request:context:)
      )

    case "RollObject":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_RollObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_RollObjectResponse>(),
        interceptors: self.interceptors?.makeRollObjectInterceptors() ?? [],
        wrapping: self.rollObject(request:context:)
      )

    case "PopAWheelie":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PopAWheelieRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PopAWheelieResponse>(),
        interceptors: self.interceptors?.makePopAWheelieInterceptors() ?? [],
        wrapping: self.popAWheelie(request:context:)
      )

    case "PickupObject":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PickupObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PickupObjectResponse>(),
        interceptors: self.interceptors?.makePickupObjectInterceptors() ?? [],
        wrapping: self.pickupObject(request:context:)
      )

    case "PlaceObjectOnGroundHere":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse>(),
        interceptors: self.interceptors?.makePlaceObjectOnGroundHereInterceptors() ?? [],
        wrapping: self.placeObjectOnGroundHere(request:context:)
      )

    case "SetMasterVolume":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_MasterVolumeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_MasterVolumeResponse>(),
        interceptors: self.interceptors?.makeSetMasterVolumeInterceptors() ?? [],
        wrapping: self.setMasterVolume(request:context:)
      )

    case "UserAuthentication":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_UserAuthenticationRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_UserAuthenticationResponse>(),
        interceptors: self.interceptors?.makeUserAuthenticationInterceptors() ?? [],
        wrapping: self.userAuthentication(request:context:)
      )

    case "BatteryState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_BatteryStateRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_BatteryStateResponse>(),
        interceptors: self.interceptors?.makeBatteryStateInterceptors() ?? [],
        wrapping: self.batteryState(request:context:)
      )

    case "VersionState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_VersionStateRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_VersionStateResponse>(),
        interceptors: self.interceptors?.makeVersionStateInterceptors() ?? [],
        wrapping: self.versionState(request:context:)
      )

    case "SayText":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SayTextRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SayTextResponse>(),
        interceptors: self.interceptors?.makeSayTextInterceptors() ?? [],
        wrapping: self.sayText(request:context:)
      )

    case "ConnectCube":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ConnectCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ConnectCubeResponse>(),
        interceptors: self.interceptors?.makeConnectCubeInterceptors() ?? [],
        wrapping: self.connectCube(request:context:)
      )

    case "DisconnectCube":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DisconnectCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DisconnectCubeResponse>(),
        interceptors: self.interceptors?.makeDisconnectCubeInterceptors() ?? [],
        wrapping: self.disconnectCube(request:context:)
      )

    case "CubesAvailable":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CubesAvailableRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CubesAvailableResponse>(),
        interceptors: self.interceptors?.makeCubesAvailableInterceptors() ?? [],
        wrapping: self.cubesAvailable(request:context:)
      )

    case "FlashCubeLights":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_FlashCubeLightsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_FlashCubeLightsResponse>(),
        interceptors: self.interceptors?.makeFlashCubeLightsInterceptors() ?? [],
        wrapping: self.flashCubeLights(request:context:)
      )

    case "ForgetPreferredCube":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse>(),
        interceptors: self.interceptors?.makeForgetPreferredCubeInterceptors() ?? [],
        wrapping: self.forgetPreferredCube(request:context:)
      )

    case "SetPreferredCube":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetPreferredCubeRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetPreferredCubeResponse>(),
        interceptors: self.interceptors?.makeSetPreferredCubeInterceptors() ?? [],
        wrapping: self.setPreferredCube(request:context:)
      )

    case "DeleteCustomObjects":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse>(),
        interceptors: self.interceptors?.makeDeleteCustomObjectsInterceptors() ?? [],
        wrapping: self.deleteCustomObjects(request:context:)
      )

    case "CreateFixedCustomObject":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse>(),
        interceptors: self.interceptors?.makeCreateFixedCustomObjectInterceptors() ?? [],
        wrapping: self.createFixedCustomObject(request:context:)
      )

    case "DefineCustomObject":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_DefineCustomObjectRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_DefineCustomObjectResponse>(),
        interceptors: self.interceptors?.makeDefineCustomObjectInterceptors() ?? [],
        wrapping: self.defineCustomObject(request:context:)
      )

    case "SetCubeLights":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetCubeLightsRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetCubeLightsResponse>(),
        interceptors: self.interceptors?.makeSetCubeLightsInterceptors() ?? [],
        wrapping: self.setCubeLights(request:context:)
      )

    case "AudioFeed":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_AudioFeedRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_AudioFeedResponse>(),
        interceptors: self.interceptors?.makeAudioFeedInterceptors() ?? [],
        wrapping: self.audioFeed(request:responseStream:context:)
      )

    case "CameraFeed":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CameraFeedRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CameraFeedResponse>(),
        interceptors: self.interceptors?.makeCameraFeedInterceptors() ?? [],
        wrapping: self.cameraFeed(request:responseStream:context:)
      )

    case "CaptureSingleImage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_CaptureSingleImageRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_CaptureSingleImageResponse>(),
        interceptors: self.interceptors?.makeCaptureSingleImageInterceptors() ?? [],
        wrapping: self.captureSingleImage(request:context:)
      )

    case "SetEyeColor":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_SetEyeColorRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_SetEyeColorResponse>(),
        interceptors: self.interceptors?.makeSetEyeColorInterceptors() ?? [],
        wrapping: self.setEyeColor(request:context:)
      )

    case "NavMapFeed":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Anki_Vector_ExternalInterface_NavMapFeedRequest>(),
        responseSerializer: ProtobufSerializer<Anki_Vector_ExternalInterface_NavMapFeedResponse>(),
        interceptors: self.interceptors?.makeNavMapFeedInterceptors() ?? [],
        wrapping: self.navMapFeed(request:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Anki_Vector_ExternalInterface_ExternalInterfaceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'protocolVersion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProtocolVersionInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_ProtocolVersionRequest, Anki_Vector_ExternalInterface_ProtocolVersionResponse>]

  /// - Returns: Interceptors to use when handling 'sDKInitialization'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSDKInitializationInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_SDKInitializationRequest, Anki_Vector_ExternalInterface_SDKInitializationResponse>]

  /// - Returns: Interceptors to use when handling 'driveWheels'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDriveWheelsInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DriveWheelsRequest, Anki_Vector_ExternalInterface_DriveWheelsResponse>]

  /// - Returns: Interceptors to use when handling 'playAnimationTrigger'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlayAnimationTriggerInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_PlayAnimationTriggerRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse>]

  /// - Returns: Interceptors to use when handling 'playAnimation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlayAnimationInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_PlayAnimationRequest, Anki_Vector_ExternalInterface_PlayAnimationResponse>]

  /// - Returns: Interceptors to use when handling 'listAnimations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListAnimationsInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_ListAnimationsRequest, Anki_Vector_ExternalInterface_ListAnimationsResponse>]

  /// - Returns: Interceptors to use when handling 'listAnimationTriggers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListAnimationTriggersInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_ListAnimationTriggersRequest, Anki_Vector_ExternalInterface_ListAnimationTriggersResponse>]

  /// - Returns: Interceptors to use when handling 'moveHead'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMoveHeadInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_MoveHeadRequest, Anki_Vector_ExternalInterface_MoveHeadResponse>]

  /// - Returns: Interceptors to use when handling 'moveLift'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMoveLiftInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_MoveLiftRequest, Anki_Vector_ExternalInterface_MoveLiftResponse>]

  /// - Returns: Interceptors to use when handling 'stopAllMotors'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopAllMotorsInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_StopAllMotorsRequest, Anki_Vector_ExternalInterface_StopAllMotorsResponse>]

  /// - Returns: Interceptors to use when handling 'displayFaceImageRGB'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisplayFaceImageRGBInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DisplayFaceImageRGBRequest, Anki_Vector_ExternalInterface_DisplayFaceImageRGBResponse>]

  /// - Returns: Interceptors to use when handling 'eventStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEventStreamInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_EventRequest, Anki_Vector_ExternalInterface_EventResponse>]

  /// - Returns: Interceptors to use when handling 'externalAudioStreamPlayback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExternalAudioStreamPlaybackInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_ExternalAudioStreamRequest, Anki_Vector_ExternalInterface_ExternalAudioStreamResponse>]

  /// - Returns: Interceptors to use when handling 'behaviorControl'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBehaviorControlInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse>]

  /// - Returns: Interceptors to use when handling 'assumeBehaviorControl'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssumeBehaviorControlInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_BehaviorControlRequest, Anki_Vector_ExternalInterface_BehaviorControlResponse>]

  /// - Returns: Interceptors to use when handling 'cancelFaceEnrollment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelFaceEnrollmentInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_CancelFaceEnrollmentRequest, Anki_Vector_ExternalInterface_CancelFaceEnrollmentResponse>]

  /// - Returns: Interceptors to use when handling 'requestEnrolledNames'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestEnrolledNamesInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_RequestEnrolledNamesRequest, Anki_Vector_ExternalInterface_RequestEnrolledNamesResponse>]

  /// - Returns: Interceptors to use when handling 'updateEnrolledFaceByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateEnrolledFaceByIDInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_UpdateEnrolledFaceByIDResponse>]

  /// - Returns: Interceptors to use when handling 'eraseEnrolledFaceByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEraseEnrolledFaceByIDInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDRequest, Anki_Vector_ExternalInterface_EraseEnrolledFaceByIDResponse>]

  /// - Returns: Interceptors to use when handling 'eraseAllEnrolledFaces'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEraseAllEnrolledFacesInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_EraseAllEnrolledFacesRequest, Anki_Vector_ExternalInterface_EraseAllEnrolledFacesResponse>]

  /// - Returns: Interceptors to use when handling 'setFaceToEnroll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetFaceToEnrollInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_SetFaceToEnrollRequest, Anki_Vector_ExternalInterface_SetFaceToEnrollResponse>]

  /// - Returns: Interceptors to use when handling 'enableMarkerDetection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableMarkerDetectionInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_EnableMarkerDetectionRequest, Anki_Vector_ExternalInterface_EnableMarkerDetectionResponse>]

  /// - Returns: Interceptors to use when handling 'enableFaceDetection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableFaceDetectionInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_EnableFaceDetectionRequest, Anki_Vector_ExternalInterface_EnableFaceDetectionResponse>]

  /// - Returns: Interceptors to use when handling 'enableMotionDetection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableMotionDetectionInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_EnableMotionDetectionRequest, Anki_Vector_ExternalInterface_EnableMotionDetectionResponse>]

  /// - Returns: Interceptors to use when handling 'enableMirrorMode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableMirrorModeInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_EnableMirrorModeRequest, Anki_Vector_ExternalInterface_EnableMirrorModeResponse>]

  /// - Returns: Interceptors to use when handling 'enableImageStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableImageStreamingInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_EnableImageStreamingRequest, Anki_Vector_ExternalInterface_EnableImageStreamingResponse>]

  /// - Returns: Interceptors to use when handling 'isImageStreamingEnabled'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsImageStreamingEnabledInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_IsImageStreamingEnabledRequest, Anki_Vector_ExternalInterface_IsImageStreamingEnabledResponse>]

  /// - Returns: Interceptors to use when handling 'cancelActionByIdTag'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelActionByIdTagInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_CancelActionByIdTagRequest, Anki_Vector_ExternalInterface_CancelActionByIdTagResponse>]

  /// - Returns: Interceptors to use when handling 'goToPose'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGoToPoseInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_GoToPoseRequest, Anki_Vector_ExternalInterface_GoToPoseResponse>]

  /// - Returns: Interceptors to use when handling 'dockWithCube'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDockWithCubeInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DockWithCubeRequest, Anki_Vector_ExternalInterface_DockWithCubeResponse>]

  /// - Returns: Interceptors to use when handling 'driveOffCharger'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDriveOffChargerInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DriveOffChargerRequest, Anki_Vector_ExternalInterface_DriveOffChargerResponse>]

  /// - Returns: Interceptors to use when handling 'driveOnCharger'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDriveOnChargerInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DriveOnChargerRequest, Anki_Vector_ExternalInterface_DriveOnChargerResponse>]

  /// - Returns: Interceptors to use when handling 'findFaces'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFindFacesInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_FindFacesRequest, Anki_Vector_ExternalInterface_FindFacesResponse>]

  /// - Returns: Interceptors to use when handling 'lookAroundInPlace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLookAroundInPlaceInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_LookAroundInPlaceRequest, Anki_Vector_ExternalInterface_LookAroundInPlaceResponse>]

  /// - Returns: Interceptors to use when handling 'rollBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRollBlockInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_RollBlockRequest, Anki_Vector_ExternalInterface_RollBlockResponse>]

  /// - Returns: Interceptors to use when handling 'photosInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePhotosInfoInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_PhotosInfoRequest, Anki_Vector_ExternalInterface_PhotosInfoResponse>]

  /// - Returns: Interceptors to use when handling 'photo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePhotoInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_PhotoRequest, Anki_Vector_ExternalInterface_PhotoResponse>]

  /// - Returns: Interceptors to use when handling 'thumbnail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeThumbnailInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_ThumbnailRequest, Anki_Vector_ExternalInterface_ThumbnailResponse>]

  /// - Returns: Interceptors to use when handling 'deletePhoto'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeletePhotoInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DeletePhotoRequest, Anki_Vector_ExternalInterface_DeletePhotoResponse>]

  /// - Returns: Interceptors to use when handling 'driveStraight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDriveStraightInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DriveStraightRequest, Anki_Vector_ExternalInterface_DriveStraightResponse>]

  /// - Returns: Interceptors to use when handling 'turnInPlace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTurnInPlaceInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_TurnInPlaceRequest, Anki_Vector_ExternalInterface_TurnInPlaceResponse>]

  /// - Returns: Interceptors to use when handling 'setHeadAngle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetHeadAngleInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_SetHeadAngleRequest, Anki_Vector_ExternalInterface_SetHeadAngleResponse>]

  /// - Returns: Interceptors to use when handling 'setLiftHeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetLiftHeightInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_SetLiftHeightRequest, Anki_Vector_ExternalInterface_SetLiftHeightResponse>]

  /// - Returns: Interceptors to use when handling 'turnTowardsFace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTurnTowardsFaceInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_TurnTowardsFaceRequest, Anki_Vector_ExternalInterface_TurnTowardsFaceResponse>]

  /// - Returns: Interceptors to use when handling 'goToObject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGoToObjectInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_GoToObjectRequest, Anki_Vector_ExternalInterface_GoToObjectResponse>]

  /// - Returns: Interceptors to use when handling 'rollObject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRollObjectInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_RollObjectRequest, Anki_Vector_ExternalInterface_RollObjectResponse>]

  /// - Returns: Interceptors to use when handling 'popAWheelie'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePopAWheelieInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_PopAWheelieRequest, Anki_Vector_ExternalInterface_PopAWheelieResponse>]

  /// - Returns: Interceptors to use when handling 'pickupObject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePickupObjectInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_PickupObjectRequest, Anki_Vector_ExternalInterface_PickupObjectResponse>]

  /// - Returns: Interceptors to use when handling 'placeObjectOnGroundHere'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlaceObjectOnGroundHereInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereRequest, Anki_Vector_ExternalInterface_PlaceObjectOnGroundHereResponse>]

  /// - Returns: Interceptors to use when handling 'setMasterVolume'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetMasterVolumeInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_MasterVolumeRequest, Anki_Vector_ExternalInterface_MasterVolumeResponse>]

  /// - Returns: Interceptors to use when handling 'userAuthentication'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserAuthenticationInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_UserAuthenticationRequest, Anki_Vector_ExternalInterface_UserAuthenticationResponse>]

  /// - Returns: Interceptors to use when handling 'batteryState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatteryStateInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_BatteryStateRequest, Anki_Vector_ExternalInterface_BatteryStateResponse>]

  /// - Returns: Interceptors to use when handling 'versionState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVersionStateInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_VersionStateRequest, Anki_Vector_ExternalInterface_VersionStateResponse>]

  /// - Returns: Interceptors to use when handling 'sayText'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayTextInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_SayTextRequest, Anki_Vector_ExternalInterface_SayTextResponse>]

  /// - Returns: Interceptors to use when handling 'connectCube'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectCubeInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_ConnectCubeRequest, Anki_Vector_ExternalInterface_ConnectCubeResponse>]

  /// - Returns: Interceptors to use when handling 'disconnectCube'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisconnectCubeInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DisconnectCubeRequest, Anki_Vector_ExternalInterface_DisconnectCubeResponse>]

  /// - Returns: Interceptors to use when handling 'cubesAvailable'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCubesAvailableInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_CubesAvailableRequest, Anki_Vector_ExternalInterface_CubesAvailableResponse>]

  /// - Returns: Interceptors to use when handling 'flashCubeLights'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFlashCubeLightsInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_FlashCubeLightsRequest, Anki_Vector_ExternalInterface_FlashCubeLightsResponse>]

  /// - Returns: Interceptors to use when handling 'forgetPreferredCube'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeForgetPreferredCubeInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_ForgetPreferredCubeRequest, Anki_Vector_ExternalInterface_ForgetPreferredCubeResponse>]

  /// - Returns: Interceptors to use when handling 'setPreferredCube'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPreferredCubeInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_SetPreferredCubeRequest, Anki_Vector_ExternalInterface_SetPreferredCubeResponse>]

  /// - Returns: Interceptors to use when handling 'deleteCustomObjects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteCustomObjectsInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DeleteCustomObjectsRequest, Anki_Vector_ExternalInterface_DeleteCustomObjectsResponse>]

  /// - Returns: Interceptors to use when handling 'createFixedCustomObject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFixedCustomObjectInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_CreateFixedCustomObjectRequest, Anki_Vector_ExternalInterface_CreateFixedCustomObjectResponse>]

  /// - Returns: Interceptors to use when handling 'defineCustomObject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDefineCustomObjectInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_DefineCustomObjectRequest, Anki_Vector_ExternalInterface_DefineCustomObjectResponse>]

  /// - Returns: Interceptors to use when handling 'setCubeLights'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetCubeLightsInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_SetCubeLightsRequest, Anki_Vector_ExternalInterface_SetCubeLightsResponse>]

  /// - Returns: Interceptors to use when handling 'audioFeed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAudioFeedInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_AudioFeedRequest, Anki_Vector_ExternalInterface_AudioFeedResponse>]

  /// - Returns: Interceptors to use when handling 'cameraFeed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCameraFeedInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_CameraFeedRequest, Anki_Vector_ExternalInterface_CameraFeedResponse>]

  /// - Returns: Interceptors to use when handling 'captureSingleImage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCaptureSingleImageInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_CaptureSingleImageRequest, Anki_Vector_ExternalInterface_CaptureSingleImageResponse>]

  /// - Returns: Interceptors to use when handling 'setEyeColor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetEyeColorInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_SetEyeColorRequest, Anki_Vector_ExternalInterface_SetEyeColorResponse>]

  /// - Returns: Interceptors to use when handling 'navMapFeed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNavMapFeedInterceptors() -> [ServerInterceptor<Anki_Vector_ExternalInterface_NavMapFeedRequest, Anki_Vector_ExternalInterface_NavMapFeedResponse>]
}

internal enum Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ExternalInterface",
    fullName: "Anki.Vector.external_interface.ExternalInterface",
    methods: [
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.protocolVersion,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.sDKInitialization,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.driveWheels,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.playAnimationTrigger,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.playAnimation,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.listAnimations,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.listAnimationTriggers,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.moveHead,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.moveLift,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.stopAllMotors,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.displayFaceImageRGB,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.eventStream,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.externalAudioStreamPlayback,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.behaviorControl,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.assumeBehaviorControl,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.cancelFaceEnrollment,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.requestEnrolledNames,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.updateEnrolledFaceByID,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.eraseEnrolledFaceByID,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.eraseAllEnrolledFaces,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.setFaceToEnroll,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.enableMarkerDetection,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.enableFaceDetection,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.enableMotionDetection,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.enableMirrorMode,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.enableImageStreaming,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.isImageStreamingEnabled,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.cancelActionByIdTag,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.goToPose,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.dockWithCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.driveOffCharger,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.driveOnCharger,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.findFaces,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.lookAroundInPlace,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.rollBlock,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.photosInfo,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.photo,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.thumbnail,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.deletePhoto,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.driveStraight,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.turnInPlace,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.setHeadAngle,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.setLiftHeight,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.turnTowardsFace,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.goToObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.rollObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.popAWheelie,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.pickupObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.placeObjectOnGroundHere,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.setMasterVolume,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.userAuthentication,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.batteryState,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.versionState,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.sayText,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.connectCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.disconnectCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.cubesAvailable,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.flashCubeLights,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.forgetPreferredCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.setPreferredCube,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.deleteCustomObjects,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.createFixedCustomObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.defineCustomObject,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.setCubeLights,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.audioFeed,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.cameraFeed,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.captureSingleImage,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.setEyeColor,
      Anki_Vector_ExternalInterface_ExternalInterfaceServerMetadata.Methods.navMapFeed,
    ]
  )

  internal enum Methods {
    internal static let protocolVersion = GRPCMethodDescriptor(
      name: "ProtocolVersion",
      path: "/Anki.Vector.external_interface.ExternalInterface/ProtocolVersion",
      type: GRPCCallType.unary
    )

    internal static let sDKInitialization = GRPCMethodDescriptor(
      name: "SDKInitialization",
      path: "/Anki.Vector.external_interface.ExternalInterface/SDKInitialization",
      type: GRPCCallType.unary
    )

    internal static let driveWheels = GRPCMethodDescriptor(
      name: "DriveWheels",
      path: "/Anki.Vector.external_interface.ExternalInterface/DriveWheels",
      type: GRPCCallType.unary
    )

    internal static let playAnimationTrigger = GRPCMethodDescriptor(
      name: "PlayAnimationTrigger",
      path: "/Anki.Vector.external_interface.ExternalInterface/PlayAnimationTrigger",
      type: GRPCCallType.unary
    )

    internal static let playAnimation = GRPCMethodDescriptor(
      name: "PlayAnimation",
      path: "/Anki.Vector.external_interface.ExternalInterface/PlayAnimation",
      type: GRPCCallType.unary
    )

    internal static let listAnimations = GRPCMethodDescriptor(
      name: "ListAnimations",
      path: "/Anki.Vector.external_interface.ExternalInterface/ListAnimations",
      type: GRPCCallType.unary
    )

    internal static let listAnimationTriggers = GRPCMethodDescriptor(
      name: "ListAnimationTriggers",
      path: "/Anki.Vector.external_interface.ExternalInterface/ListAnimationTriggers",
      type: GRPCCallType.unary
    )

    internal static let moveHead = GRPCMethodDescriptor(
      name: "MoveHead",
      path: "/Anki.Vector.external_interface.ExternalInterface/MoveHead",
      type: GRPCCallType.unary
    )

    internal static let moveLift = GRPCMethodDescriptor(
      name: "MoveLift",
      path: "/Anki.Vector.external_interface.ExternalInterface/MoveLift",
      type: GRPCCallType.unary
    )

    internal static let stopAllMotors = GRPCMethodDescriptor(
      name: "StopAllMotors",
      path: "/Anki.Vector.external_interface.ExternalInterface/StopAllMotors",
      type: GRPCCallType.unary
    )

    internal static let displayFaceImageRGB = GRPCMethodDescriptor(
      name: "DisplayFaceImageRGB",
      path: "/Anki.Vector.external_interface.ExternalInterface/DisplayFaceImageRGB",
      type: GRPCCallType.unary
    )

    internal static let eventStream = GRPCMethodDescriptor(
      name: "EventStream",
      path: "/Anki.Vector.external_interface.ExternalInterface/EventStream",
      type: GRPCCallType.serverStreaming
    )

    internal static let externalAudioStreamPlayback = GRPCMethodDescriptor(
      name: "ExternalAudioStreamPlayback",
      path: "/Anki.Vector.external_interface.ExternalInterface/ExternalAudioStreamPlayback",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let behaviorControl = GRPCMethodDescriptor(
      name: "BehaviorControl",
      path: "/Anki.Vector.external_interface.ExternalInterface/BehaviorControl",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let assumeBehaviorControl = GRPCMethodDescriptor(
      name: "AssumeBehaviorControl",
      path: "/Anki.Vector.external_interface.ExternalInterface/AssumeBehaviorControl",
      type: GRPCCallType.serverStreaming
    )

    internal static let cancelFaceEnrollment = GRPCMethodDescriptor(
      name: "CancelFaceEnrollment",
      path: "/Anki.Vector.external_interface.ExternalInterface/CancelFaceEnrollment",
      type: GRPCCallType.unary
    )

    internal static let requestEnrolledNames = GRPCMethodDescriptor(
      name: "RequestEnrolledNames",
      path: "/Anki.Vector.external_interface.ExternalInterface/RequestEnrolledNames",
      type: GRPCCallType.unary
    )

    internal static let updateEnrolledFaceByID = GRPCMethodDescriptor(
      name: "UpdateEnrolledFaceByID",
      path: "/Anki.Vector.external_interface.ExternalInterface/UpdateEnrolledFaceByID",
      type: GRPCCallType.unary
    )

    internal static let eraseEnrolledFaceByID = GRPCMethodDescriptor(
      name: "EraseEnrolledFaceByID",
      path: "/Anki.Vector.external_interface.ExternalInterface/EraseEnrolledFaceByID",
      type: GRPCCallType.unary
    )

    internal static let eraseAllEnrolledFaces = GRPCMethodDescriptor(
      name: "EraseAllEnrolledFaces",
      path: "/Anki.Vector.external_interface.ExternalInterface/EraseAllEnrolledFaces",
      type: GRPCCallType.unary
    )

    internal static let setFaceToEnroll = GRPCMethodDescriptor(
      name: "SetFaceToEnroll",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetFaceToEnroll",
      type: GRPCCallType.unary
    )

    internal static let enableMarkerDetection = GRPCMethodDescriptor(
      name: "EnableMarkerDetection",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableMarkerDetection",
      type: GRPCCallType.unary
    )

    internal static let enableFaceDetection = GRPCMethodDescriptor(
      name: "EnableFaceDetection",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableFaceDetection",
      type: GRPCCallType.unary
    )

    internal static let enableMotionDetection = GRPCMethodDescriptor(
      name: "EnableMotionDetection",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableMotionDetection",
      type: GRPCCallType.unary
    )

    internal static let enableMirrorMode = GRPCMethodDescriptor(
      name: "EnableMirrorMode",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableMirrorMode",
      type: GRPCCallType.unary
    )

    internal static let enableImageStreaming = GRPCMethodDescriptor(
      name: "EnableImageStreaming",
      path: "/Anki.Vector.external_interface.ExternalInterface/EnableImageStreaming",
      type: GRPCCallType.unary
    )

    internal static let isImageStreamingEnabled = GRPCMethodDescriptor(
      name: "IsImageStreamingEnabled",
      path: "/Anki.Vector.external_interface.ExternalInterface/IsImageStreamingEnabled",
      type: GRPCCallType.unary
    )

    internal static let cancelActionByIdTag = GRPCMethodDescriptor(
      name: "CancelActionByIdTag",
      path: "/Anki.Vector.external_interface.ExternalInterface/CancelActionByIdTag",
      type: GRPCCallType.unary
    )

    internal static let goToPose = GRPCMethodDescriptor(
      name: "GoToPose",
      path: "/Anki.Vector.external_interface.ExternalInterface/GoToPose",
      type: GRPCCallType.unary
    )

    internal static let dockWithCube = GRPCMethodDescriptor(
      name: "DockWithCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/DockWithCube",
      type: GRPCCallType.unary
    )

    internal static let driveOffCharger = GRPCMethodDescriptor(
      name: "DriveOffCharger",
      path: "/Anki.Vector.external_interface.ExternalInterface/DriveOffCharger",
      type: GRPCCallType.unary
    )

    internal static let driveOnCharger = GRPCMethodDescriptor(
      name: "DriveOnCharger",
      path: "/Anki.Vector.external_interface.ExternalInterface/DriveOnCharger",
      type: GRPCCallType.unary
    )

    internal static let findFaces = GRPCMethodDescriptor(
      name: "FindFaces",
      path: "/Anki.Vector.external_interface.ExternalInterface/FindFaces",
      type: GRPCCallType.unary
    )

    internal static let lookAroundInPlace = GRPCMethodDescriptor(
      name: "LookAroundInPlace",
      path: "/Anki.Vector.external_interface.ExternalInterface/LookAroundInPlace",
      type: GRPCCallType.unary
    )

    internal static let rollBlock = GRPCMethodDescriptor(
      name: "RollBlock",
      path: "/Anki.Vector.external_interface.ExternalInterface/RollBlock",
      type: GRPCCallType.unary
    )

    internal static let photosInfo = GRPCMethodDescriptor(
      name: "PhotosInfo",
      path: "/Anki.Vector.external_interface.ExternalInterface/PhotosInfo",
      type: GRPCCallType.unary
    )

    internal static let photo = GRPCMethodDescriptor(
      name: "Photo",
      path: "/Anki.Vector.external_interface.ExternalInterface/Photo",
      type: GRPCCallType.unary
    )

    internal static let thumbnail = GRPCMethodDescriptor(
      name: "Thumbnail",
      path: "/Anki.Vector.external_interface.ExternalInterface/Thumbnail",
      type: GRPCCallType.unary
    )

    internal static let deletePhoto = GRPCMethodDescriptor(
      name: "DeletePhoto",
      path: "/Anki.Vector.external_interface.ExternalInterface/DeletePhoto",
      type: GRPCCallType.unary
    )

    internal static let driveStraight = GRPCMethodDescriptor(
      name: "DriveStraight",
      path: "/Anki.Vector.external_interface.ExternalInterface/DriveStraight",
      type: GRPCCallType.unary
    )

    internal static let turnInPlace = GRPCMethodDescriptor(
      name: "TurnInPlace",
      path: "/Anki.Vector.external_interface.ExternalInterface/TurnInPlace",
      type: GRPCCallType.unary
    )

    internal static let setHeadAngle = GRPCMethodDescriptor(
      name: "SetHeadAngle",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetHeadAngle",
      type: GRPCCallType.unary
    )

    internal static let setLiftHeight = GRPCMethodDescriptor(
      name: "SetLiftHeight",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetLiftHeight",
      type: GRPCCallType.unary
    )

    internal static let turnTowardsFace = GRPCMethodDescriptor(
      name: "TurnTowardsFace",
      path: "/Anki.Vector.external_interface.ExternalInterface/TurnTowardsFace",
      type: GRPCCallType.unary
    )

    internal static let goToObject = GRPCMethodDescriptor(
      name: "GoToObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/GoToObject",
      type: GRPCCallType.unary
    )

    internal static let rollObject = GRPCMethodDescriptor(
      name: "RollObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/RollObject",
      type: GRPCCallType.unary
    )

    internal static let popAWheelie = GRPCMethodDescriptor(
      name: "PopAWheelie",
      path: "/Anki.Vector.external_interface.ExternalInterface/PopAWheelie",
      type: GRPCCallType.unary
    )

    internal static let pickupObject = GRPCMethodDescriptor(
      name: "PickupObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/PickupObject",
      type: GRPCCallType.unary
    )

    internal static let placeObjectOnGroundHere = GRPCMethodDescriptor(
      name: "PlaceObjectOnGroundHere",
      path: "/Anki.Vector.external_interface.ExternalInterface/PlaceObjectOnGroundHere",
      type: GRPCCallType.unary
    )

    internal static let setMasterVolume = GRPCMethodDescriptor(
      name: "SetMasterVolume",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetMasterVolume",
      type: GRPCCallType.unary
    )

    internal static let userAuthentication = GRPCMethodDescriptor(
      name: "UserAuthentication",
      path: "/Anki.Vector.external_interface.ExternalInterface/UserAuthentication",
      type: GRPCCallType.unary
    )

    internal static let batteryState = GRPCMethodDescriptor(
      name: "BatteryState",
      path: "/Anki.Vector.external_interface.ExternalInterface/BatteryState",
      type: GRPCCallType.unary
    )

    internal static let versionState = GRPCMethodDescriptor(
      name: "VersionState",
      path: "/Anki.Vector.external_interface.ExternalInterface/VersionState",
      type: GRPCCallType.unary
    )

    internal static let sayText = GRPCMethodDescriptor(
      name: "SayText",
      path: "/Anki.Vector.external_interface.ExternalInterface/SayText",
      type: GRPCCallType.unary
    )

    internal static let connectCube = GRPCMethodDescriptor(
      name: "ConnectCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/ConnectCube",
      type: GRPCCallType.unary
    )

    internal static let disconnectCube = GRPCMethodDescriptor(
      name: "DisconnectCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/DisconnectCube",
      type: GRPCCallType.unary
    )

    internal static let cubesAvailable = GRPCMethodDescriptor(
      name: "CubesAvailable",
      path: "/Anki.Vector.external_interface.ExternalInterface/CubesAvailable",
      type: GRPCCallType.unary
    )

    internal static let flashCubeLights = GRPCMethodDescriptor(
      name: "FlashCubeLights",
      path: "/Anki.Vector.external_interface.ExternalInterface/FlashCubeLights",
      type: GRPCCallType.unary
    )

    internal static let forgetPreferredCube = GRPCMethodDescriptor(
      name: "ForgetPreferredCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/ForgetPreferredCube",
      type: GRPCCallType.unary
    )

    internal static let setPreferredCube = GRPCMethodDescriptor(
      name: "SetPreferredCube",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetPreferredCube",
      type: GRPCCallType.unary
    )

    internal static let deleteCustomObjects = GRPCMethodDescriptor(
      name: "DeleteCustomObjects",
      path: "/Anki.Vector.external_interface.ExternalInterface/DeleteCustomObjects",
      type: GRPCCallType.unary
    )

    internal static let createFixedCustomObject = GRPCMethodDescriptor(
      name: "CreateFixedCustomObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/CreateFixedCustomObject",
      type: GRPCCallType.unary
    )

    internal static let defineCustomObject = GRPCMethodDescriptor(
      name: "DefineCustomObject",
      path: "/Anki.Vector.external_interface.ExternalInterface/DefineCustomObject",
      type: GRPCCallType.unary
    )

    internal static let setCubeLights = GRPCMethodDescriptor(
      name: "SetCubeLights",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetCubeLights",
      type: GRPCCallType.unary
    )

    internal static let audioFeed = GRPCMethodDescriptor(
      name: "AudioFeed",
      path: "/Anki.Vector.external_interface.ExternalInterface/AudioFeed",
      type: GRPCCallType.serverStreaming
    )

    internal static let cameraFeed = GRPCMethodDescriptor(
      name: "CameraFeed",
      path: "/Anki.Vector.external_interface.ExternalInterface/CameraFeed",
      type: GRPCCallType.serverStreaming
    )

    internal static let captureSingleImage = GRPCMethodDescriptor(
      name: "CaptureSingleImage",
      path: "/Anki.Vector.external_interface.ExternalInterface/CaptureSingleImage",
      type: GRPCCallType.unary
    )

    internal static let setEyeColor = GRPCMethodDescriptor(
      name: "SetEyeColor",
      path: "/Anki.Vector.external_interface.ExternalInterface/SetEyeColor",
      type: GRPCCallType.unary
    )

    internal static let navMapFeed = GRPCMethodDescriptor(
      name: "NavMapFeed",
      path: "/Anki.Vector.external_interface.ExternalInterface/NavMapFeed",
      type: GRPCCallType.serverStreaming
    )
  }
}

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: anki_vector/messaging/shared.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// External interface for robot <-> app and robot <-> sdk communication

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Anki_Vector_ExternalInterface_ProtocolVersionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clientVersion: Int64 = 0

  public var minHostVersion: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Anki_Vector_ExternalInterface_ProtocolVersionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Anki_Vector_ExternalInterface_ProtocolVersionResponse.Result = .unsupported

  public var hostVersion: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unsupported // = 0
    case success // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unsupported
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unsupported
      case 1: self = .success
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unsupported: return 0
      case .success: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Anki_Vector_ExternalInterface_ProtocolVersionResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anki_Vector_ExternalInterface_ProtocolVersionResponse.Result] = [
    .unsupported,
    .success,
  ]
}

#endif  // swift(>=4.2)

public struct Anki_Vector_ExternalInterface_ConnectionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Anki_Vector_ExternalInterface_ResponseStatus {
    get {return _status ?? Anki_Vector_ExternalInterface_ResponseStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var isPrimary: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Anki_Vector_ExternalInterface_ResponseStatus? = nil
}

/// Messages originating from the engine
public struct Anki_Vector_ExternalInterface_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var eventType: Anki_Vector_ExternalInterface_Event.OneOf_EventType? = nil

  public var timeStampedStatus: Anki_Vector_ExternalInterface_TimeStampedStatus {
    get {
      if case .timeStampedStatus(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_TimeStampedStatus()
    }
    set {eventType = .timeStampedStatus(newValue)}
  }

  public var wakeWord: Anki_Vector_ExternalInterface_WakeWord {
    get {
      if case .wakeWord(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_WakeWord()
    }
    set {eventType = .wakeWord(newValue)}
  }

  public var robotObservedFace: Anki_Vector_ExternalInterface_RobotObservedFace {
    get {
      if case .robotObservedFace(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_RobotObservedFace()
    }
    set {eventType = .robotObservedFace(newValue)}
  }

  public var robotChangedObservedFaceID: Anki_Vector_ExternalInterface_RobotChangedObservedFaceID {
    get {
      if case .robotChangedObservedFaceID(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_RobotChangedObservedFaceID()
    }
    set {eventType = .robotChangedObservedFaceID(newValue)}
  }

  public var objectEvent: Anki_Vector_ExternalInterface_ObjectEvent {
    get {
      if case .objectEvent(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_ObjectEvent()
    }
    set {eventType = .objectEvent(newValue)}
  }

  public var stimulationInfo: Anki_Vector_ExternalInterface_StimulationInfo {
    get {
      if case .stimulationInfo(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_StimulationInfo()
    }
    set {eventType = .stimulationInfo(newValue)}
  }

  public var photoTaken: Anki_Vector_ExternalInterface_PhotoTaken {
    get {
      if case .photoTaken(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_PhotoTaken()
    }
    set {eventType = .photoTaken(newValue)}
  }

  public var robotState: Anki_Vector_ExternalInterface_RobotState {
    get {
      if case .robotState(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_RobotState()
    }
    set {eventType = .robotState(newValue)}
  }

  public var cubeBattery: Anki_Vector_ExternalInterface_CubeBattery {
    get {
      if case .cubeBattery(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_CubeBattery()
    }
    set {eventType = .cubeBattery(newValue)}
  }

  /// Used by Vector to verify the connection is still alive.
  public var keepAlive: Anki_Vector_ExternalInterface_KeepAlivePing {
    get {
      if case .keepAlive(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_KeepAlivePing()
    }
    set {eventType = .keepAlive(newValue)}
  }

  public var connectionResponse: Anki_Vector_ExternalInterface_ConnectionResponse {
    get {
      if case .connectionResponse(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_ConnectionResponse()
    }
    set {eventType = .connectionResponse(newValue)}
  }

  public var mirrorModeDisabled: Anki_Vector_ExternalInterface_MirrorModeDisabled {
    get {
      if case .mirrorModeDisabled(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_MirrorModeDisabled()
    }
    set {eventType = .mirrorModeDisabled(newValue)}
  }

  public var visionModesAutoDisabled: Anki_Vector_ExternalInterface_VisionModesAutoDisabled {
    get {
      if case .visionModesAutoDisabled(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_VisionModesAutoDisabled()
    }
    set {eventType = .visionModesAutoDisabled(newValue)}
  }

  public var userIntent: Anki_Vector_ExternalInterface_UserIntent {
    get {
      if case .userIntent(let v)? = eventType {return v}
      return Anki_Vector_ExternalInterface_UserIntent()
    }
    set {eventType = .userIntent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_EventType: Equatable {
    case timeStampedStatus(Anki_Vector_ExternalInterface_TimeStampedStatus)
    case wakeWord(Anki_Vector_ExternalInterface_WakeWord)
    case robotObservedFace(Anki_Vector_ExternalInterface_RobotObservedFace)
    case robotChangedObservedFaceID(Anki_Vector_ExternalInterface_RobotChangedObservedFaceID)
    case objectEvent(Anki_Vector_ExternalInterface_ObjectEvent)
    case stimulationInfo(Anki_Vector_ExternalInterface_StimulationInfo)
    case photoTaken(Anki_Vector_ExternalInterface_PhotoTaken)
    case robotState(Anki_Vector_ExternalInterface_RobotState)
    case cubeBattery(Anki_Vector_ExternalInterface_CubeBattery)
    /// Used by Vector to verify the connection is still alive.
    case keepAlive(Anki_Vector_ExternalInterface_KeepAlivePing)
    case connectionResponse(Anki_Vector_ExternalInterface_ConnectionResponse)
    case mirrorModeDisabled(Anki_Vector_ExternalInterface_MirrorModeDisabled)
    case visionModesAutoDisabled(Anki_Vector_ExternalInterface_VisionModesAutoDisabled)
    case userIntent(Anki_Vector_ExternalInterface_UserIntent)

  #if !swift(>=4.1)
    public static func ==(lhs: Anki_Vector_ExternalInterface_Event.OneOf_EventType, rhs: Anki_Vector_ExternalInterface_Event.OneOf_EventType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.timeStampedStatus, .timeStampedStatus): return {
        guard case .timeStampedStatus(let l) = lhs, case .timeStampedStatus(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wakeWord, .wakeWord): return {
        guard case .wakeWord(let l) = lhs, case .wakeWord(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.robotObservedFace, .robotObservedFace): return {
        guard case .robotObservedFace(let l) = lhs, case .robotObservedFace(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.robotChangedObservedFaceID, .robotChangedObservedFaceID): return {
        guard case .robotChangedObservedFaceID(let l) = lhs, case .robotChangedObservedFaceID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.objectEvent, .objectEvent): return {
        guard case .objectEvent(let l) = lhs, case .objectEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stimulationInfo, .stimulationInfo): return {
        guard case .stimulationInfo(let l) = lhs, case .stimulationInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.photoTaken, .photoTaken): return {
        guard case .photoTaken(let l) = lhs, case .photoTaken(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.robotState, .robotState): return {
        guard case .robotState(let l) = lhs, case .robotState(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.cubeBattery, .cubeBattery): return {
        guard case .cubeBattery(let l) = lhs, case .cubeBattery(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.keepAlive, .keepAlive): return {
        guard case .keepAlive(let l) = lhs, case .keepAlive(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.connectionResponse, .connectionResponse): return {
        guard case .connectionResponse(let l) = lhs, case .connectionResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mirrorModeDisabled, .mirrorModeDisabled): return {
        guard case .mirrorModeDisabled(let l) = lhs, case .mirrorModeDisabled(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.visionModesAutoDisabled, .visionModesAutoDisabled): return {
        guard case .visionModesAutoDisabled(let l) = lhs, case .visionModesAutoDisabled(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userIntent, .userIntent): return {
        guard case .userIntent(let l) = lhs, case .userIntent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Anki_Vector_ExternalInterface_FilterList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var list: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Anki_Vector_ExternalInterface_EventRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var listType: Anki_Vector_ExternalInterface_EventRequest.OneOf_ListType? = nil

  public var whiteList: Anki_Vector_ExternalInterface_FilterList {
    get {
      if case .whiteList(let v)? = listType {return v}
      return Anki_Vector_ExternalInterface_FilterList()
    }
    set {listType = .whiteList(newValue)}
  }

  public var blackList: Anki_Vector_ExternalInterface_FilterList {
    get {
      if case .blackList(let v)? = listType {return v}
      return Anki_Vector_ExternalInterface_FilterList()
    }
    set {listType = .blackList(newValue)}
  }

  public var connectionID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ListType: Equatable {
    case whiteList(Anki_Vector_ExternalInterface_FilterList)
    case blackList(Anki_Vector_ExternalInterface_FilterList)

  #if !swift(>=4.1)
    public static func ==(lhs: Anki_Vector_ExternalInterface_EventRequest.OneOf_ListType, rhs: Anki_Vector_ExternalInterface_EventRequest.OneOf_ListType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.whiteList, .whiteList): return {
        guard case .whiteList(let l) = lhs, case .whiteList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.blackList, .blackList): return {
        guard case .blackList(let l) = lhs, case .blackList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Anki_Vector_ExternalInterface_EventResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Anki_Vector_ExternalInterface_ResponseStatus {
    get {return _status ?? Anki_Vector_ExternalInterface_ResponseStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var event: Anki_Vector_ExternalInterface_Event {
    get {return _event ?? Anki_Vector_ExternalInterface_Event()}
    set {_event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  public var hasEvent: Bool {return self._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  public mutating func clearEvent() {self._event = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Anki_Vector_ExternalInterface_ResponseStatus? = nil
  fileprivate var _event: Anki_Vector_ExternalInterface_Event? = nil
}

public struct Anki_Vector_ExternalInterface_UserAuthenticationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userSessionID: Data = Data()

  public var clientName: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Anki_Vector_ExternalInterface_UserAuthenticationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Anki_Vector_ExternalInterface_ResponseStatus {
    get {return _status ?? Anki_Vector_ExternalInterface_ResponseStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var code: Anki_Vector_ExternalInterface_UserAuthenticationResponse.Code = .unauthorized

  public var clientTokenGuid: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Code: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unauthorized // = 0
    case authorized // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unauthorized
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unauthorized
      case 1: self = .authorized
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unauthorized: return 0
      case .authorized: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _status: Anki_Vector_ExternalInterface_ResponseStatus? = nil
}

#if swift(>=4.2)

extension Anki_Vector_ExternalInterface_UserAuthenticationResponse.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anki_Vector_ExternalInterface_UserAuthenticationResponse.Code] = [
    .unauthorized,
    .authorized,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Anki_Vector_ExternalInterface_ProtocolVersionRequest: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_ProtocolVersionResponse: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_ProtocolVersionResponse.Result: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_ConnectionResponse: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_Event: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_Event.OneOf_EventType: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_FilterList: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_EventRequest: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_EventRequest.OneOf_ListType: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_EventResponse: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_UserAuthenticationRequest: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_UserAuthenticationResponse: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_UserAuthenticationResponse.Code: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "Anki.Vector.external_interface"

extension Anki_Vector_ExternalInterface_ProtocolVersionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProtocolVersionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_version"),
    2: .standard(proto: "min_host_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.clientVersion) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.minHostVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientVersion != 0 {
      try visitor.visitSingularInt64Field(value: self.clientVersion, fieldNumber: 1)
    }
    if self.minHostVersion != 0 {
      try visitor.visitSingularInt64Field(value: self.minHostVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_ProtocolVersionRequest, rhs: Anki_Vector_ExternalInterface_ProtocolVersionRequest) -> Bool {
    if lhs.clientVersion != rhs.clientVersion {return false}
    if lhs.minHostVersion != rhs.minHostVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_ProtocolVersionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProtocolVersionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "host_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.hostVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unsupported {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if self.hostVersion != 0 {
      try visitor.visitSingularInt64Field(value: self.hostVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_ProtocolVersionResponse, rhs: Anki_Vector_ExternalInterface_ProtocolVersionResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.hostVersion != rhs.hostVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_ProtocolVersionResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSUPPORTED"),
    1: .same(proto: "SUCCESS"),
  ]
}

extension Anki_Vector_ExternalInterface_ConnectionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "is_primary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isPrimary) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.isPrimary != false {
      try visitor.visitSingularBoolField(value: self.isPrimary, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_ConnectionResponse, rhs: Anki_Vector_ExternalInterface_ConnectionResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.isPrimary != rhs.isPrimary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamped_status"),
    3: .standard(proto: "wake_word"),
    5: .standard(proto: "robot_observed_face"),
    6: .standard(proto: "robot_changed_observed_face_id"),
    7: .standard(proto: "object_event"),
    8: .standard(proto: "stimulation_info"),
    9: .standard(proto: "photo_taken"),
    10: .standard(proto: "robot_state"),
    11: .standard(proto: "cube_battery"),
    12: .standard(proto: "keep_alive"),
    13: .standard(proto: "connection_response"),
    16: .standard(proto: "mirror_mode_disabled"),
    17: .standard(proto: "vision_modes_auto_disabled"),
    19: .standard(proto: "user_intent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anki_Vector_ExternalInterface_TimeStampedStatus?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .timeStampedStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .timeStampedStatus(v)
        }
      }()
      case 3: try {
        var v: Anki_Vector_ExternalInterface_WakeWord?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .wakeWord(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .wakeWord(v)
        }
      }()
      case 5: try {
        var v: Anki_Vector_ExternalInterface_RobotObservedFace?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .robotObservedFace(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .robotObservedFace(v)
        }
      }()
      case 6: try {
        var v: Anki_Vector_ExternalInterface_RobotChangedObservedFaceID?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .robotChangedObservedFaceID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .robotChangedObservedFaceID(v)
        }
      }()
      case 7: try {
        var v: Anki_Vector_ExternalInterface_ObjectEvent?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .objectEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .objectEvent(v)
        }
      }()
      case 8: try {
        var v: Anki_Vector_ExternalInterface_StimulationInfo?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .stimulationInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .stimulationInfo(v)
        }
      }()
      case 9: try {
        var v: Anki_Vector_ExternalInterface_PhotoTaken?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .photoTaken(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .photoTaken(v)
        }
      }()
      case 10: try {
        var v: Anki_Vector_ExternalInterface_RobotState?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .robotState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .robotState(v)
        }
      }()
      case 11: try {
        var v: Anki_Vector_ExternalInterface_CubeBattery?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .cubeBattery(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .cubeBattery(v)
        }
      }()
      case 12: try {
        var v: Anki_Vector_ExternalInterface_KeepAlivePing?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .keepAlive(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .keepAlive(v)
        }
      }()
      case 13: try {
        var v: Anki_Vector_ExternalInterface_ConnectionResponse?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .connectionResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .connectionResponse(v)
        }
      }()
      case 16: try {
        var v: Anki_Vector_ExternalInterface_MirrorModeDisabled?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .mirrorModeDisabled(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .mirrorModeDisabled(v)
        }
      }()
      case 17: try {
        var v: Anki_Vector_ExternalInterface_VisionModesAutoDisabled?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .visionModesAutoDisabled(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .visionModesAutoDisabled(v)
        }
      }()
      case 19: try {
        var v: Anki_Vector_ExternalInterface_UserIntent?
        var hadOneofValue = false
        if let current = self.eventType {
          hadOneofValue = true
          if case .userIntent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventType = .userIntent(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.eventType {
    case .timeStampedStatus?: try {
      guard case .timeStampedStatus(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .wakeWord?: try {
      guard case .wakeWord(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .robotObservedFace?: try {
      guard case .robotObservedFace(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .robotChangedObservedFaceID?: try {
      guard case .robotChangedObservedFaceID(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .objectEvent?: try {
      guard case .objectEvent(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .stimulationInfo?: try {
      guard case .stimulationInfo(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .photoTaken?: try {
      guard case .photoTaken(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .robotState?: try {
      guard case .robotState(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .cubeBattery?: try {
      guard case .cubeBattery(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .keepAlive?: try {
      guard case .keepAlive(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .connectionResponse?: try {
      guard case .connectionResponse(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .mirrorModeDisabled?: try {
      guard case .mirrorModeDisabled(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .visionModesAutoDisabled?: try {
      guard case .visionModesAutoDisabled(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .userIntent?: try {
      guard case .userIntent(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_Event, rhs: Anki_Vector_ExternalInterface_Event) -> Bool {
    if lhs.eventType != rhs.eventType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_FilterList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FilterList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedStringField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_FilterList, rhs: Anki_Vector_ExternalInterface_FilterList) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_EventRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "white_list"),
    2: .standard(proto: "black_list"),
    3: .standard(proto: "connection_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anki_Vector_ExternalInterface_FilterList?
        var hadOneofValue = false
        if let current = self.listType {
          hadOneofValue = true
          if case .whiteList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.listType = .whiteList(v)
        }
      }()
      case 2: try {
        var v: Anki_Vector_ExternalInterface_FilterList?
        var hadOneofValue = false
        if let current = self.listType {
          hadOneofValue = true
          if case .blackList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.listType = .blackList(v)
        }
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.listType {
    case .whiteList?: try {
      guard case .whiteList(let v)? = self.listType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .blackList?: try {
      guard case .blackList(let v)? = self.listType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_EventRequest, rhs: Anki_Vector_ExternalInterface_EventRequest) -> Bool {
    if lhs.listType != rhs.listType {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_EventResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "event"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._event) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_EventResponse, rhs: Anki_Vector_ExternalInterface_EventResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_UserAuthenticationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserAuthenticationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_session_id"),
    2: .standard(proto: "client_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.userSessionID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.clientName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userSessionID.isEmpty {
      try visitor.visitSingularBytesField(value: self.userSessionID, fieldNumber: 1)
    }
    if !self.clientName.isEmpty {
      try visitor.visitSingularBytesField(value: self.clientName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_UserAuthenticationRequest, rhs: Anki_Vector_ExternalInterface_UserAuthenticationRequest) -> Bool {
    if lhs.userSessionID != rhs.userSessionID {return false}
    if lhs.clientName != rhs.clientName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_UserAuthenticationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserAuthenticationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "code"),
    3: .standard(proto: "client_token_guid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.clientTokenGuid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.code != .unauthorized {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 2)
    }
    if !self.clientTokenGuid.isEmpty {
      try visitor.visitSingularBytesField(value: self.clientTokenGuid, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_UserAuthenticationResponse, rhs: Anki_Vector_ExternalInterface_UserAuthenticationResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.code != rhs.code {return false}
    if lhs.clientTokenGuid != rhs.clientTokenGuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_UserAuthenticationResponse.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNAUTHORIZED"),
    1: .same(proto: "AUTHORIZED"),
  ]
}

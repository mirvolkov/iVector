// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: anki_vector/messaging/response_status.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Response status

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A shared response message sent back as part of most requests.
/// This will indicate the generic state of the request.
public struct Anki_Vector_ExternalInterface_ResponseStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The generic status code to give high-level insight into the progress of a given message.
  public var code: Anki_Vector_ExternalInterface_ResponseStatus.StatusCode = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum StatusCode: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// The message has completed as expected.
    case responseReceived // = 1

    /// The message has been sent to the robot.
    case requestProcessing // = 2

    /// The message has been handled successfully at the interface level.
    case ok // = 3

    /// The user was not authorizied.
    case forbidden // = 100

    /// The requested attribute was not found.
    case notFound // = 101

    /// Currently updating values from another call.
    case errorUpdateInProgress // = 102
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .responseReceived
      case 2: self = .requestProcessing
      case 3: self = .ok
      case 100: self = .forbidden
      case 101: self = .notFound
      case 102: self = .errorUpdateInProgress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .responseReceived: return 1
      case .requestProcessing: return 2
      case .ok: return 3
      case .forbidden: return 100
      case .notFound: return 101
      case .errorUpdateInProgress: return 102
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Anki_Vector_ExternalInterface_ResponseStatus.StatusCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anki_Vector_ExternalInterface_ResponseStatus.StatusCode] = [
    .unknown,
    .responseReceived,
    .requestProcessing,
    .ok,
    .forbidden,
    .notFound,
    .errorUpdateInProgress,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Anki_Vector_ExternalInterface_ResponseStatus: @unchecked Sendable {}
extension Anki_Vector_ExternalInterface_ResponseStatus.StatusCode: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "Anki.Vector.external_interface"

extension Anki_Vector_ExternalInterface_ResponseStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResponseStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .unknown {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anki_Vector_ExternalInterface_ResponseStatus, rhs: Anki_Vector_ExternalInterface_ResponseStatus) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anki_Vector_ExternalInterface_ResponseStatus.StatusCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "RESPONSE_RECEIVED"),
    2: .same(proto: "REQUEST_PROCESSING"),
    3: .same(proto: "OK"),
    100: .same(proto: "FORBIDDEN"),
    101: .same(proto: "NOT_FOUND"),
    102: .same(proto: "ERROR_UPDATE_IN_PROGRESS"),
  ]
}

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: anki_vector/messaging/external_interface.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018 Anki, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License in the file LICENSE.txt or at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// External interface for robot <-> app and robot <-> sdk communication

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// <p>The valid versions of the protocol.</p>
/// <p>Protocol versions are updated when messages change significantly:
/// new ones are added and removed, fields deprecated, etc.</p>
/// <p>The goal is to support as many old versions as possible, only
/// bumping the minimum when there is no way to handle a prior version.</p>
public enum Anki_Vector_ExternalInterface_ProtocolVersion: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Required zero value for enums
  case unknown // = 0

  /// Minimum supported version
  public static let minimum = unknown

  /// Current version (incremented on 2019.03.12 for streaming update status support.)
  case current // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 5: self = .current
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .current: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Anki_Vector_ExternalInterface_ProtocolVersion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anki_Vector_ExternalInterface_ProtocolVersion] = [
    .unknown,
    .current,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Anki_Vector_ExternalInterface_ProtocolVersion: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Anki_Vector_ExternalInterface_ProtocolVersion: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .aliased(proto: "PROTOCOL_VERSION_UNKNOWN", aliases: ["PROTOCOL_VERSION_MINIMUM"]),
    5: .same(proto: "PROTOCOL_VERSION_CURRENT"),
  ]
}
